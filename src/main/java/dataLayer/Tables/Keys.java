/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables;


import dataLayer.Tables.tables.Admins;
import dataLayer.Tables.tables.ApprovalRequests;
import dataLayer.Tables.tables.Ars;
import dataLayer.Tables.tables.CoachTeam;
import dataLayer.Tables.tables.Coaches;
import dataLayer.Tables.tables.Complaints;
import dataLayer.Tables.tables.Eventrecorder;
import dataLayer.Tables.tables.EventsrecorderEvents;
import dataLayer.Tables.tables.Fans;
import dataLayer.Tables.tables.Foul;
import dataLayer.Tables.tables.Goal;
import dataLayer.Tables.tables.Injury;
import dataLayer.Tables.tables.League;
import dataLayer.Tables.tables.Logs;
import dataLayer.Tables.tables.Match;
import dataLayer.Tables.tables.MatchReferee;
import dataLayer.Tables.tables.MatchingPolicy;
import dataLayer.Tables.tables.Offside;
import dataLayer.Tables.tables.OwnerManagerAssignings;
import dataLayer.Tables.tables.OwnerOwnerAssignings;
import dataLayer.Tables.tables.OwnerTeams;
import dataLayer.Tables.tables.OwnersOfStadium;
import dataLayer.Tables.tables.PageOwner;
import dataLayer.Tables.tables.PagePost;
import dataLayer.Tables.tables.Pages;
import dataLayer.Tables.tables.Players;
import dataLayer.Tables.tables.PreviousGamesInStadium;
import dataLayer.Tables.tables.Rankingpolicy;
import dataLayer.Tables.tables.Redcard;
import dataLayer.Tables.tables.RefereeMatches;
import dataLayer.Tables.tables.Referees;
import dataLayer.Tables.tables.SeasonMatches;
import dataLayer.Tables.tables.SeasonReferee;
import dataLayer.Tables.tables.SeasonTableleague;
import dataLayer.Tables.tables.SeasonTeams;
import dataLayer.Tables.tables.Seasons;
import dataLayer.Tables.tables.Stadium;
import dataLayer.Tables.tables.Subscribers;
import dataLayer.Tables.tables.Substitute;
import dataLayer.Tables.tables.TeamPlayers;
import dataLayer.Tables.tables.Teammanagers;
import dataLayer.Tables.tables.TeamownerOwnereligible;
import dataLayer.Tables.tables.Teams;
import dataLayer.Tables.tables.UnconfirmedTeams;
import dataLayer.Tables.tables.Yellowcard;
import dataLayer.Tables.tables.records.AdminsRecord;
import dataLayer.Tables.tables.records.ApprovalRequestsRecord;
import dataLayer.Tables.tables.records.ArsRecord;
import dataLayer.Tables.tables.records.CoachTeamRecord;
import dataLayer.Tables.tables.records.CoachesRecord;
import dataLayer.Tables.tables.records.ComplaintsRecord;
import dataLayer.Tables.tables.records.EventrecorderRecord;
import dataLayer.Tables.tables.records.EventsrecorderEventsRecord;
import dataLayer.Tables.tables.records.FansRecord;
import dataLayer.Tables.tables.records.FoulRecord;
import dataLayer.Tables.tables.records.GoalRecord;
import dataLayer.Tables.tables.records.InjuryRecord;
import dataLayer.Tables.tables.records.LeagueRecord;
import dataLayer.Tables.tables.records.LogsRecord;
import dataLayer.Tables.tables.records.MatchRecord;
import dataLayer.Tables.tables.records.MatchRefereeRecord;
import dataLayer.Tables.tables.records.MatchingPolicyRecord;
import dataLayer.Tables.tables.records.OffsideRecord;
import dataLayer.Tables.tables.records.OwnerManagerAssigningsRecord;
import dataLayer.Tables.tables.records.OwnerOwnerAssigningsRecord;
import dataLayer.Tables.tables.records.OwnerTeamsRecord;
import dataLayer.Tables.tables.records.OwnersOfStadiumRecord;
import dataLayer.Tables.tables.records.PageOwnerRecord;
import dataLayer.Tables.tables.records.PagePostRecord;
import dataLayer.Tables.tables.records.PagesRecord;
import dataLayer.Tables.tables.records.PlayersRecord;
import dataLayer.Tables.tables.records.PreviousGamesInStadiumRecord;
import dataLayer.Tables.tables.records.RankingpolicyRecord;
import dataLayer.Tables.tables.records.RedcardRecord;
import dataLayer.Tables.tables.records.RefereeMatchesRecord;
import dataLayer.Tables.tables.records.RefereesRecord;
import dataLayer.Tables.tables.records.SeasonMatchesRecord;
import dataLayer.Tables.tables.records.SeasonRefereeRecord;
import dataLayer.Tables.tables.records.SeasonTableleagueRecord;
import dataLayer.Tables.tables.records.SeasonTeamsRecord;
import dataLayer.Tables.tables.records.SeasonsRecord;
import dataLayer.Tables.tables.records.StadiumRecord;
import dataLayer.Tables.tables.records.SubscribersRecord;
import dataLayer.Tables.tables.records.SubstituteRecord;
import dataLayer.Tables.tables.records.TeamPlayersRecord;
import dataLayer.Tables.tables.records.TeammanagersRecord;
import dataLayer.Tables.tables.records.TeamownerOwnereligibleRecord;
import dataLayer.Tables.tables.records.TeamsRecord;
import dataLayer.Tables.tables.records.UnconfirmedTeamsRecord;
import dataLayer.Tables.tables.records.YellowcardRecord;

import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.Internal;


/**
 * A class modelling foreign key relationships and constraints of tables of 
 * the <code>testdb3</code> schema.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Keys {

    // -------------------------------------------------------------------------
    // IDENTITY definitions
    // -------------------------------------------------------------------------

    public static final Identity<LogsRecord, Integer> IDENTITY_LOGS = Identities0.IDENTITY_LOGS;
    public static final Identity<PagesRecord, Integer> IDENTITY_PAGES = Identities0.IDENTITY_PAGES;

    // -------------------------------------------------------------------------
    // UNIQUE and PRIMARY KEY definitions
    // -------------------------------------------------------------------------

    public static final UniqueKey<AdminsRecord> KEY_ADMINS_PRIMARY = UniqueKeys0.KEY_ADMINS_PRIMARY;
    public static final UniqueKey<ApprovalRequestsRecord> KEY_APPROVAL_REQUESTS_PRIMARY = UniqueKeys0.KEY_APPROVAL_REQUESTS_PRIMARY;
    public static final UniqueKey<ArsRecord> KEY_ARS_PRIMARY = UniqueKeys0.KEY_ARS_PRIMARY;
    public static final UniqueKey<CoachesRecord> KEY_COACHES_PRIMARY = UniqueKeys0.KEY_COACHES_PRIMARY;
    public static final UniqueKey<ComplaintsRecord> KEY_COMPLAINTS_PRIMARY = UniqueKeys0.KEY_COMPLAINTS_PRIMARY;
    public static final UniqueKey<EventrecorderRecord> KEY_EVENTRECORDER_PRIMARY = UniqueKeys0.KEY_EVENTRECORDER_PRIMARY;
    public static final UniqueKey<EventsrecorderEventsRecord> KEY_EVENTSRECORDER_EVENTS_MATCHID_EVENTID = UniqueKeys0.KEY_EVENTSRECORDER_EVENTS_MATCHID_EVENTID;
    public static final UniqueKey<FansRecord> KEY_FANS_PRIMARY = UniqueKeys0.KEY_FANS_PRIMARY;
    public static final UniqueKey<FoulRecord> KEY_FOUL_MATCHID_EVENTID = UniqueKeys0.KEY_FOUL_MATCHID_EVENTID;
    public static final UniqueKey<LeagueRecord> KEY_LEAGUE_PRIMARY = UniqueKeys0.KEY_LEAGUE_PRIMARY;
    public static final UniqueKey<LogsRecord> KEY_LOGS_PRIMARY = UniqueKeys0.KEY_LOGS_PRIMARY;
    public static final UniqueKey<MatchRecord> KEY_MATCH_PRIMARY = UniqueKeys0.KEY_MATCH_PRIMARY;
    public static final UniqueKey<MatchingPolicyRecord> KEY_MATCHING_POLICY_PRIMARY = UniqueKeys0.KEY_MATCHING_POLICY_PRIMARY;
    public static final UniqueKey<OwnersOfStadiumRecord> KEY_OWNERS_OF_STADIUM_PRIMARY = UniqueKeys0.KEY_OWNERS_OF_STADIUM_PRIMARY;
    public static final UniqueKey<PagesRecord> KEY_PAGES_PRIMARY = UniqueKeys0.KEY_PAGES_PRIMARY;
    public static final UniqueKey<PlayersRecord> KEY_PLAYERS_PRIMARY = UniqueKeys0.KEY_PLAYERS_PRIMARY;
    public static final UniqueKey<RankingpolicyRecord> KEY_RANKINGPOLICY_PRIMARY = UniqueKeys0.KEY_RANKINGPOLICY_PRIMARY;
    public static final UniqueKey<RefereesRecord> KEY_REFEREES_PRIMARY = UniqueKeys0.KEY_REFEREES_PRIMARY;
    public static final UniqueKey<SeasonsRecord> KEY_SEASONS_PRIMARY = UniqueKeys0.KEY_SEASONS_PRIMARY;
    public static final UniqueKey<SeasonsRecord> KEY_SEASONS_LEAGUEID_SEASONID = UniqueKeys0.KEY_SEASONS_LEAGUEID_SEASONID;
    public static final UniqueKey<StadiumRecord> KEY_STADIUM_PRIMARY = UniqueKeys0.KEY_STADIUM_PRIMARY;
    public static final UniqueKey<SubscribersRecord> KEY_SUBSCRIBERS_PRIMARY = UniqueKeys0.KEY_SUBSCRIBERS_PRIMARY;
    public static final UniqueKey<TeamPlayersRecord> KEY_TEAM_PLAYERS_PLAYERID = UniqueKeys0.KEY_TEAM_PLAYERS_PLAYERID;
    public static final UniqueKey<TeammanagersRecord> KEY_TEAMMANAGERS_PRIMARY = UniqueKeys0.KEY_TEAMMANAGERS_PRIMARY;
    public static final UniqueKey<TeamownerOwnereligibleRecord> KEY_TEAMOWNER_OWNERELIGIBLE_PRIMARY = UniqueKeys0.KEY_TEAMOWNER_OWNERELIGIBLE_PRIMARY;
    public static final UniqueKey<TeamsRecord> KEY_TEAMS_PRIMARY = UniqueKeys0.KEY_TEAMS_PRIMARY;
    public static final UniqueKey<UnconfirmedTeamsRecord> KEY_UNCONFIRMED_TEAMS_PRIMARY = UniqueKeys0.KEY_UNCONFIRMED_TEAMS_PRIMARY;

    // -------------------------------------------------------------------------
    // FOREIGN KEY definitions
    // -------------------------------------------------------------------------

    public static final ForeignKey<AdminsRecord, SubscribersRecord> FK_ADMINS_SUBSCRIBERS = ForeignKeys0.FK_ADMINS_SUBSCRIBERS;
    public static final ForeignKey<ArsRecord, SubscribersRecord> FK_ARS_SUBSCRIBERS = ForeignKeys0.FK_ARS_SUBSCRIBERS;
    public static final ForeignKey<CoachTeamRecord, CoachesRecord> FK_COACH_TEAM_COACHES = ForeignKeys0.FK_COACH_TEAM_COACHES;
    public static final ForeignKey<CoachTeamRecord, TeamsRecord> FK_COACH_TEAM_TEAMS = ForeignKeys0.FK_COACH_TEAM_TEAMS;
    public static final ForeignKey<CoachesRecord, SubscribersRecord> FK_COACHES_SUBSCRIBERS = ForeignKeys0.FK_COACHES_SUBSCRIBERS;
    public static final ForeignKey<CoachesRecord, TeamownerOwnereligibleRecord> TEAMOWNER = ForeignKeys0.TEAMOWNER;
    public static final ForeignKey<ComplaintsRecord, SubscribersRecord> FK__SUBSCRIBERS = ForeignKeys0.FK__SUBSCRIBERS;
    public static final ForeignKey<ComplaintsRecord, SubscribersRecord> FK__SUBSCRIBERS_2 = ForeignKeys0.FK__SUBSCRIBERS_2;
    public static final ForeignKey<EventrecorderRecord, MatchRecord> FK_EVENTRECORDER_MATCH = ForeignKeys0.FK_EVENTRECORDER_MATCH;
    public static final ForeignKey<EventsrecorderEventsRecord, MatchRecord> FK__MATCH = ForeignKeys0.FK__MATCH;
    public static final ForeignKey<FansRecord, SubscribersRecord> FK_FANS_SUBSCRIBERS = ForeignKeys0.FK_FANS_SUBSCRIBERS;
    public static final ForeignKey<FoulRecord, MatchRecord> FK_FOUL_MATCH = ForeignKeys0.FK_FOUL_MATCH;
    public static final ForeignKey<FoulRecord, PlayersRecord> FK_FOUL_PLAYERS = ForeignKeys0.FK_FOUL_PLAYERS;
    public static final ForeignKey<FoulRecord, PlayersRecord> FK_FOUL_PLAYERS_2 = ForeignKeys0.FK_FOUL_PLAYERS_2;
    public static final ForeignKey<GoalRecord, MatchRecord> FK_GOAL_MATCH = ForeignKeys0.FK_GOAL_MATCH;
    public static final ForeignKey<GoalRecord, PlayersRecord> FK_GOAL_PLAYERS = ForeignKeys0.FK_GOAL_PLAYERS;
    public static final ForeignKey<GoalRecord, PlayersRecord> FK_GOAL_PLAYERS_2 = ForeignKeys0.FK_GOAL_PLAYERS_2;
    public static final ForeignKey<InjuryRecord, MatchRecord> FK_INJURY_MATCH = ForeignKeys0.FK_INJURY_MATCH;
    public static final ForeignKey<InjuryRecord, PlayersRecord> FK_INJURY_PLAYERS = ForeignKeys0.FK_INJURY_PLAYERS;
    public static final ForeignKey<MatchRecord, LeagueRecord> FK_MATCH_LEAGUE = ForeignKeys0.FK_MATCH_LEAGUE;
    public static final ForeignKey<MatchRecord, TeamsRecord> FK_MATCH_TEAMS = ForeignKeys0.FK_MATCH_TEAMS;
    public static final ForeignKey<MatchRecord, TeamsRecord> FK_MATCH_TEAMS_2 = ForeignKeys0.FK_MATCH_TEAMS_2;
    public static final ForeignKey<MatchRecord, StadiumRecord> FK3 = ForeignKeys0.FK3;
    public static final ForeignKey<MatchRecord, RefereesRecord> FK_MATCH_REFEREES = ForeignKeys0.FK_MATCH_REFEREES;
    public static final ForeignKey<MatchRefereeRecord, MatchRecord> FK_MATCH_REFEREE_MATCH = ForeignKeys0.FK_MATCH_REFEREE_MATCH;
    public static final ForeignKey<MatchRefereeRecord, RefereesRecord> FK_MATCH_REFEREE_REFEREES = ForeignKeys0.FK_MATCH_REFEREE_REFEREES;
    public static final ForeignKey<MatchingPolicyRecord, LeagueRecord> FK_MATCHING_POLICY_LEAGUE = ForeignKeys0.FK_MATCHING_POLICY_LEAGUE;
    public static final ForeignKey<OffsideRecord, MatchRecord> FK_OFFSIDE_MATCH = ForeignKeys0.FK_OFFSIDE_MATCH;
    public static final ForeignKey<OffsideRecord, PlayersRecord> FK_OFFSIDE_PLAYERS = ForeignKeys0.FK_OFFSIDE_PLAYERS;
    public static final ForeignKey<OwnerManagerAssigningsRecord, TeamsRecord> FK_OWNER_MANAGER_ASSIGNINGS_TEAMS = ForeignKeys0.FK_OWNER_MANAGER_ASSIGNINGS_TEAMS;
    public static final ForeignKey<OwnerManagerAssigningsRecord, TeammanagersRecord> FK_OWNER_MANAGER_ASSIGNINGS_TEAMMANAGERS = ForeignKeys0.FK_OWNER_MANAGER_ASSIGNINGS_TEAMMANAGERS;
    public static final ForeignKey<OwnerOwnerAssigningsRecord, TeamsRecord> FK_OWNER_OWNER_ASSIGNINGS_TEAMS = ForeignKeys0.FK_OWNER_OWNER_ASSIGNINGS_TEAMS;
    public static final ForeignKey<OwnerOwnerAssigningsRecord, SubscribersRecord> FK_OWNER_OWNER_ASSIGNINGS_SUBSCRIBERS = ForeignKeys0.FK_OWNER_OWNER_ASSIGNINGS_SUBSCRIBERS;
    public static final ForeignKey<OwnerTeamsRecord, SubscribersRecord> FK_OWNER_TEAMS_SUBSCRIBERS = ForeignKeys0.FK_OWNER_TEAMS_SUBSCRIBERS;
    public static final ForeignKey<OwnerTeamsRecord, TeamsRecord> TEAMFK = ForeignKeys0.TEAMFK;
    public static final ForeignKey<OwnersOfStadiumRecord, StadiumRecord> FK_OWNERS_OF_STADIUM_STADIUM = ForeignKeys0.FK_OWNERS_OF_STADIUM_STADIUM;
    public static final ForeignKey<OwnersOfStadiumRecord, TeamsRecord> FK_OWNERS_OF_STADIUM_TEAMS = ForeignKeys0.FK_OWNERS_OF_STADIUM_TEAMS;
    public static final ForeignKey<PageOwnerRecord, PagesRecord> FK_PAGE_OWNER_PAGES = ForeignKeys0.FK_PAGE_OWNER_PAGES;
    public static final ForeignKey<PagePostRecord, PagesRecord> FK_PAGE_POST_PAGES = ForeignKeys0.FK_PAGE_POST_PAGES;
    public static final ForeignKey<PlayersRecord, SubscribersRecord> FK_PLAYERS_SUBSCRIBERS = ForeignKeys0.FK_PLAYERS_SUBSCRIBERS;
    public static final ForeignKey<PlayersRecord, TeamsRecord> TEAMID = ForeignKeys0.TEAMID;
    public static final ForeignKey<PreviousGamesInStadiumRecord, StadiumRecord> FK_PREVIOUS_GAMES_IN_STADIUM_STADIUM = ForeignKeys0.FK_PREVIOUS_GAMES_IN_STADIUM_STADIUM;
    public static final ForeignKey<PreviousGamesInStadiumRecord, MatchRecord> FK_PREVIOUS_GAMES_IN_STADIUM_MATCH = ForeignKeys0.FK_PREVIOUS_GAMES_IN_STADIUM_MATCH;
    public static final ForeignKey<RankingpolicyRecord, LeagueRecord> FK_RANKINGPOLICY_LEAGUE = ForeignKeys0.FK_RANKINGPOLICY_LEAGUE;
    public static final ForeignKey<RedcardRecord, MatchRecord> FK_REDCARD_MATCH = ForeignKeys0.FK_REDCARD_MATCH;
    public static final ForeignKey<RedcardRecord, PlayersRecord> FK_REDCARD_PLAYERS = ForeignKeys0.FK_REDCARD_PLAYERS;
    public static final ForeignKey<RefereeMatchesRecord, RefereesRecord> FK_REFEREE_MATCHES_REFEREES = ForeignKeys0.FK_REFEREE_MATCHES_REFEREES;
    public static final ForeignKey<RefereeMatchesRecord, MatchRecord> FK_REFEREE_MATCHES_MATCH = ForeignKeys0.FK_REFEREE_MATCHES_MATCH;
    public static final ForeignKey<RefereesRecord, SubscribersRecord> FK_REFEREES_SUBSCRIBERS = ForeignKeys0.FK_REFEREES_SUBSCRIBERS;
    public static final ForeignKey<SeasonMatchesRecord, LeagueRecord> FK_SEASON_MATCHES_LEAGUE = ForeignKeys0.FK_SEASON_MATCHES_LEAGUE;
    public static final ForeignKey<SeasonMatchesRecord, MatchRecord> FK_SEASON_MATCHES_MATCH = ForeignKeys0.FK_SEASON_MATCHES_MATCH;
    public static final ForeignKey<SeasonRefereeRecord, LeagueRecord> FK_SEASON_REFEREE_LEAGUE = ForeignKeys0.FK_SEASON_REFEREE_LEAGUE;
    public static final ForeignKey<SeasonRefereeRecord, RefereesRecord> FK_SEASON_REFEREE_REFEREES = ForeignKeys0.FK_SEASON_REFEREE_REFEREES;
    public static final ForeignKey<SeasonTableleagueRecord, LeagueRecord> FK_SEASON_TABLELEAGUE_LEAGUE = ForeignKeys0.FK_SEASON_TABLELEAGUE_LEAGUE;
    public static final ForeignKey<SeasonTableleagueRecord, TeamsRecord> FK_SEASON_TABLELEAGUE_TEAMS = ForeignKeys0.FK_SEASON_TABLELEAGUE_TEAMS;
    public static final ForeignKey<SeasonTeamsRecord, LeagueRecord> FK_SEASON_TEAMS_LEAGUE = ForeignKeys0.FK_SEASON_TEAMS_LEAGUE;
    public static final ForeignKey<SeasonTeamsRecord, TeamsRecord> FK_SEASON_TEAMS_TEAMS = ForeignKeys0.FK_SEASON_TEAMS_TEAMS;
    public static final ForeignKey<SeasonsRecord, LeagueRecord> FK_SEASONS_LEAGUE = ForeignKeys0.FK_SEASONS_LEAGUE;
    public static final ForeignKey<SubstituteRecord, MatchRecord> FK_SUBSTITUTE_MATCH = ForeignKeys0.FK_SUBSTITUTE_MATCH;
    public static final ForeignKey<SubstituteRecord, PlayersRecord> FK_SUBSTITUTE_PLAYERS = ForeignKeys0.FK_SUBSTITUTE_PLAYERS;
    public static final ForeignKey<SubstituteRecord, PlayersRecord> FK_SUBSTITUTE_PLAYERS_2 = ForeignKeys0.FK_SUBSTITUTE_PLAYERS_2;
    public static final ForeignKey<TeamPlayersRecord, TeamsRecord> FK_TEAM_PLAYERS_TEAMS = ForeignKeys0.FK_TEAM_PLAYERS_TEAMS;
    public static final ForeignKey<TeamPlayersRecord, PlayersRecord> FK_TEAM_PLAYERS_PLAYERS = ForeignKeys0.FK_TEAM_PLAYERS_PLAYERS;
    public static final ForeignKey<TeammanagersRecord, SubscribersRecord> FK_TEAMMANAGERS_SUBSCRIBERS = ForeignKeys0.FK_TEAMMANAGERS_SUBSCRIBERS;
    public static final ForeignKey<TeammanagersRecord, TeamsRecord> FK_TEAMMANAGERS_TEAMS = ForeignKeys0.FK_TEAMMANAGERS_TEAMS;
    public static final ForeignKey<TeammanagersRecord, TeamownerOwnereligibleRecord> TEAMOWNERID = ForeignKeys0.TEAMOWNERID;
    public static final ForeignKey<TeamownerOwnereligibleRecord, SubscribersRecord> FK_TEAMOWNER_OWNERELIGIBLE_SUBSCRIBERS1 = ForeignKeys0.FK_TEAMOWNER_OWNERELIGIBLE_SUBSCRIBERS1;
    public static final ForeignKey<TeamownerOwnereligibleRecord, PlayersRecord> FK_TEAMOWNER_OWNERELIGIBLE_PLAYERS1 = ForeignKeys0.FK_TEAMOWNER_OWNERELIGIBLE_PLAYERS1;
    public static final ForeignKey<TeamownerOwnereligibleRecord, TeammanagersRecord> FK_TEAMOWNER_OWNERELIGIBLE_TEAMMANAGERS1 = ForeignKeys0.FK_TEAMOWNER_OWNERELIGIBLE_TEAMMANAGERS1;
    public static final ForeignKey<TeamownerOwnereligibleRecord, CoachesRecord> FK_TEAMOWNER_OWNERELIGIBLE_COACHES1 = ForeignKeys0.FK_TEAMOWNER_OWNERELIGIBLE_COACHES1;
    public static final ForeignKey<TeamsRecord, TeammanagersRecord> FK_TEAMS_TEAMMANAGERS = ForeignKeys0.FK_TEAMS_TEAMMANAGERS;
    public static final ForeignKey<UnconfirmedTeamsRecord, SubscribersRecord> FK_UNCONFIRMED_TEAMS_SUBSCRIBERS = ForeignKeys0.FK_UNCONFIRMED_TEAMS_SUBSCRIBERS;
    public static final ForeignKey<YellowcardRecord, MatchRecord> FK_YELLOWCARD_MATCH = ForeignKeys0.FK_YELLOWCARD_MATCH;
    public static final ForeignKey<YellowcardRecord, PlayersRecord> FK_YELLOWCARD_PLAYERS = ForeignKeys0.FK_YELLOWCARD_PLAYERS;

    // -------------------------------------------------------------------------
    // [#1459] distribute members to avoid static initialisers > 64kb
    // -------------------------------------------------------------------------

    private static class Identities0 {
        public static Identity<LogsRecord, Integer> IDENTITY_LOGS = Internal.createIdentity(Logs.LOGS, Logs.LOGS.INDEX);
        public static Identity<PagesRecord, Integer> IDENTITY_PAGES = Internal.createIdentity(Pages.PAGES, Pages.PAGES.PAGEID);
    }

    private static class UniqueKeys0 {
        public static final UniqueKey<AdminsRecord> KEY_ADMINS_PRIMARY = Internal.createUniqueKey(Admins.ADMINS, "KEY_admins_PRIMARY", new TableField[] { Admins.ADMINS.ADMINID }, true);
        public static final UniqueKey<ApprovalRequestsRecord> KEY_APPROVAL_REQUESTS_PRIMARY = Internal.createUniqueKey(ApprovalRequests.APPROVAL_REQUESTS, "KEY_approval_requests_PRIMARY", new TableField[] { ApprovalRequests.APPROVAL_REQUESTS.USERNAME }, true);
        public static final UniqueKey<ArsRecord> KEY_ARS_PRIMARY = Internal.createUniqueKey(Ars.ARS, "KEY_ars_PRIMARY", new TableField[] { Ars.ARS.AR_ID }, true);
        public static final UniqueKey<CoachesRecord> KEY_COACHES_PRIMARY = Internal.createUniqueKey(Coaches.COACHES, "KEY_coaches_PRIMARY", new TableField[] { Coaches.COACHES.COACHID }, true);
        public static final UniqueKey<ComplaintsRecord> KEY_COMPLAINTS_PRIMARY = Internal.createUniqueKey(Complaints.COMPLAINTS, "KEY_complaints_PRIMARY", new TableField[] { Complaints.COMPLAINTS.COMPLAINTID }, true);
        public static final UniqueKey<EventrecorderRecord> KEY_EVENTRECORDER_PRIMARY = Internal.createUniqueKey(Eventrecorder.EVENTRECORDER, "KEY_eventrecorder_PRIMARY", new TableField[] { Eventrecorder.EVENTRECORDER.MATCHID }, true);
        public static final UniqueKey<EventsrecorderEventsRecord> KEY_EVENTSRECORDER_EVENTS_MATCHID_EVENTID = Internal.createUniqueKey(EventsrecorderEvents.EVENTSRECORDER_EVENTS, "KEY_eventsrecorder_events_matchID_eventID", new TableField[] { EventsrecorderEvents.EVENTSRECORDER_EVENTS.MATCHID, EventsrecorderEvents.EVENTSRECORDER_EVENTS.EVENTID }, true);
        public static final UniqueKey<FansRecord> KEY_FANS_PRIMARY = Internal.createUniqueKey(Fans.FANS, "KEY_fans_PRIMARY", new TableField[] { Fans.FANS.FANID }, true);
        public static final UniqueKey<FoulRecord> KEY_FOUL_MATCHID_EVENTID = Internal.createUniqueKey(Foul.FOUL, "KEY_foul_MatchID_EventID", new TableField[] { Foul.FOUL.MATCHID, Foul.FOUL.EVENTID }, true);
        public static final UniqueKey<LeagueRecord> KEY_LEAGUE_PRIMARY = Internal.createUniqueKey(League.LEAGUE, "KEY_league_PRIMARY", new TableField[] { League.LEAGUE.LEAGUEID }, true);
        public static final UniqueKey<LogsRecord> KEY_LOGS_PRIMARY = Internal.createUniqueKey(Logs.LOGS, "KEY_logs_PRIMARY", new TableField[] { Logs.LOGS.INDEX }, true);
        public static final UniqueKey<MatchRecord> KEY_MATCH_PRIMARY = Internal.createUniqueKey(Match.MATCH, "KEY_match_PRIMARY", new TableField[] { Match.MATCH.MATCHID }, true);
        public static final UniqueKey<MatchingPolicyRecord> KEY_MATCHING_POLICY_PRIMARY = Internal.createUniqueKey(MatchingPolicy.MATCHING_POLICY, "KEY_matching policy_PRIMARY", new TableField[] { MatchingPolicy.MATCHING_POLICY.LEAGUEID, MatchingPolicy.MATCHING_POLICY.SEASONID }, true);
        public static final UniqueKey<OwnersOfStadiumRecord> KEY_OWNERS_OF_STADIUM_PRIMARY = Internal.createUniqueKey(OwnersOfStadium.OWNERS_OF_STADIUM, "KEY_owners_of_stadium_PRIMARY", new TableField[] { OwnersOfStadium.OWNERS_OF_STADIUM.STADIUMID }, true);
        public static final UniqueKey<PagesRecord> KEY_PAGES_PRIMARY = Internal.createUniqueKey(Pages.PAGES, "KEY_pages_PRIMARY", new TableField[] { Pages.PAGES.PAGEID }, true);
        public static final UniqueKey<PlayersRecord> KEY_PLAYERS_PRIMARY = Internal.createUniqueKey(Players.PLAYERS, "KEY_players_PRIMARY", new TableField[] { Players.PLAYERS.PLAYERID }, true);
        public static final UniqueKey<RankingpolicyRecord> KEY_RANKINGPOLICY_PRIMARY = Internal.createUniqueKey(Rankingpolicy.RANKINGPOLICY, "KEY_rankingpolicy_PRIMARY", new TableField[] { Rankingpolicy.RANKINGPOLICY.LEAGUEID, Rankingpolicy.RANKINGPOLICY.SEASONID }, true);
        public static final UniqueKey<RefereesRecord> KEY_REFEREES_PRIMARY = Internal.createUniqueKey(Referees.REFEREES, "KEY_referees_PRIMARY", new TableField[] { Referees.REFEREES.REFEREEID }, true);
        public static final UniqueKey<SeasonsRecord> KEY_SEASONS_PRIMARY = Internal.createUniqueKey(Seasons.SEASONS, "KEY_seasons_PRIMARY", new TableField[] { Seasons.SEASONS.LEAGUEID, Seasons.SEASONS.SEASONID }, true);
        public static final UniqueKey<SeasonsRecord> KEY_SEASONS_LEAGUEID_SEASONID = Internal.createUniqueKey(Seasons.SEASONS, "KEY_seasons_leagueID_seasonID", new TableField[] { Seasons.SEASONS.LEAGUEID, Seasons.SEASONS.SEASONID }, true);
        public static final UniqueKey<StadiumRecord> KEY_STADIUM_PRIMARY = Internal.createUniqueKey(Stadium.STADIUM, "KEY_stadium_PRIMARY", new TableField[] { Stadium.STADIUM.STADIUMID }, true);
        public static final UniqueKey<SubscribersRecord> KEY_SUBSCRIBERS_PRIMARY = Internal.createUniqueKey(Subscribers.SUBSCRIBERS, "KEY_subscribers_PRIMARY", new TableField[] { Subscribers.SUBSCRIBERS.SUBSCRIBERID }, true);
        public static final UniqueKey<TeamPlayersRecord> KEY_TEAM_PLAYERS_PLAYERID = Internal.createUniqueKey(TeamPlayers.TEAM_PLAYERS, "KEY_team_players_PlayerID", new TableField[] { TeamPlayers.TEAM_PLAYERS.PLAYERID }, true);
        public static final UniqueKey<TeammanagersRecord> KEY_TEAMMANAGERS_PRIMARY = Internal.createUniqueKey(Teammanagers.TEAMMANAGERS, "KEY_teammanagers_PRIMARY", new TableField[] { Teammanagers.TEAMMANAGERS.MANAGERID }, true);
        public static final UniqueKey<TeamownerOwnereligibleRecord> KEY_TEAMOWNER_OWNERELIGIBLE_PRIMARY = Internal.createUniqueKey(TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE, "KEY_teamowner_ownereligible_PRIMARY", new TableField[] { TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE.OWNERID }, true);
        public static final UniqueKey<TeamsRecord> KEY_TEAMS_PRIMARY = Internal.createUniqueKey(Teams.TEAMS, "KEY_teams_PRIMARY", new TableField[] { Teams.TEAMS.NAME }, true);
        public static final UniqueKey<UnconfirmedTeamsRecord> KEY_UNCONFIRMED_TEAMS_PRIMARY = Internal.createUniqueKey(UnconfirmedTeams.UNCONFIRMED_TEAMS, "KEY_unconfirmed_teams_PRIMARY", new TableField[] { UnconfirmedTeams.UNCONFIRMED_TEAMS.TEAMID }, true);
    }

    private static class ForeignKeys0 {
        public static final ForeignKey<AdminsRecord, SubscribersRecord> FK_ADMINS_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, Admins.ADMINS, "FK_admins_subscribers", new TableField[] { Admins.ADMINS.ADMINID }, true);
        public static final ForeignKey<ArsRecord, SubscribersRecord> FK_ARS_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, Ars.ARS, "FK_ars_subscribers", new TableField[] { Ars.ARS.AR_ID }, true);
        public static final ForeignKey<CoachTeamRecord, CoachesRecord> FK_COACH_TEAM_COACHES = Internal.createForeignKey(Keys.KEY_COACHES_PRIMARY, CoachTeam.COACH_TEAM, "FK_coach_team_coaches", new TableField[] { CoachTeam.COACH_TEAM.COACHID }, true);
        public static final ForeignKey<CoachTeamRecord, TeamsRecord> FK_COACH_TEAM_TEAMS = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, CoachTeam.COACH_TEAM, "FK_coach_team_teams", new TableField[] { CoachTeam.COACH_TEAM.TEAMID }, true);
        public static final ForeignKey<CoachesRecord, SubscribersRecord> FK_COACHES_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, Coaches.COACHES, "FK_coaches_subscribers", new TableField[] { Coaches.COACHES.COACHID }, true);
        public static final ForeignKey<CoachesRecord, TeamownerOwnereligibleRecord> TEAMOWNER = Internal.createForeignKey(Keys.KEY_TEAMOWNER_OWNERELIGIBLE_PRIMARY, Coaches.COACHES, "teamowner", new TableField[] { Coaches.COACHES.TEAMOWNERID_FICTIVE }, true);
        public static final ForeignKey<ComplaintsRecord, SubscribersRecord> FK__SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, Complaints.COMPLAINTS, "FK__subscribers", new TableField[] { Complaints.COMPLAINTS.WRITERID }, true);
        public static final ForeignKey<ComplaintsRecord, SubscribersRecord> FK__SUBSCRIBERS_2 = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, Complaints.COMPLAINTS, "FK__subscribers_2", new TableField[] { Complaints.COMPLAINTS.HANDLERID }, true);
        public static final ForeignKey<EventrecorderRecord, MatchRecord> FK_EVENTRECORDER_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, Eventrecorder.EVENTRECORDER, "FK_eventrecorder_match", new TableField[] { Eventrecorder.EVENTRECORDER.MATCHID }, true);
        public static final ForeignKey<EventsrecorderEventsRecord, MatchRecord> FK__MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, EventsrecorderEvents.EVENTSRECORDER_EVENTS, "FK__match", new TableField[] { EventsrecorderEvents.EVENTSRECORDER_EVENTS.MATCHID }, true);
        public static final ForeignKey<FansRecord, SubscribersRecord> FK_FANS_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, Fans.FANS, "FK_fans_subscribers", new TableField[] { Fans.FANS.FANID }, true);
        public static final ForeignKey<FoulRecord, MatchRecord> FK_FOUL_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, Foul.FOUL, "FK_foul_match", new TableField[] { Foul.FOUL.MATCHID }, true);
        public static final ForeignKey<FoulRecord, PlayersRecord> FK_FOUL_PLAYERS = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Foul.FOUL, "FK_foul_players", new TableField[] { Foul.FOUL.PLAYERAGAINSTID }, true);
        public static final ForeignKey<FoulRecord, PlayersRecord> FK_FOUL_PLAYERS_2 = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Foul.FOUL, "FK_foul_players_2", new TableField[] { Foul.FOUL.PLAYERINFAVORID }, true);
        public static final ForeignKey<GoalRecord, MatchRecord> FK_GOAL_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, Goal.GOAL, "FK_goal_match", new TableField[] { Goal.GOAL.MATCHID }, true);
        public static final ForeignKey<GoalRecord, PlayersRecord> FK_GOAL_PLAYERS = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Goal.GOAL, "FK_goal_players", new TableField[] { Goal.GOAL.PLAYERGOALID }, true);
        public static final ForeignKey<GoalRecord, PlayersRecord> FK_GOAL_PLAYERS_2 = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Goal.GOAL, "FK_goal_players_2", new TableField[] { Goal.GOAL.PLAYERASSISTID }, true);
        public static final ForeignKey<InjuryRecord, MatchRecord> FK_INJURY_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, Injury.INJURY, "FK_injury_match", new TableField[] { Injury.INJURY.MATCHID }, true);
        public static final ForeignKey<InjuryRecord, PlayersRecord> FK_INJURY_PLAYERS = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Injury.INJURY, "FK_injury_players", new TableField[] { Injury.INJURY.PLAYERINJUREDID }, true);
        public static final ForeignKey<MatchRecord, LeagueRecord> FK_MATCH_LEAGUE = Internal.createForeignKey(Keys.KEY_LEAGUE_PRIMARY, Match.MATCH, "FK_match_league", new TableField[] { Match.MATCH.LEAGUEID }, true);
        public static final ForeignKey<MatchRecord, TeamsRecord> FK_MATCH_TEAMS = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, Match.MATCH, "FK_match_teams", new TableField[] { Match.MATCH.TEAMHOMEID }, true);
        public static final ForeignKey<MatchRecord, TeamsRecord> FK_MATCH_TEAMS_2 = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, Match.MATCH, "FK_match_teams_2", new TableField[] { Match.MATCH.TEAMAWAYID }, true);
        public static final ForeignKey<MatchRecord, StadiumRecord> FK3 = Internal.createForeignKey(Keys.KEY_STADIUM_PRIMARY, Match.MATCH, "FK3", new TableField[] { Match.MATCH.STADIUMID }, true);
        public static final ForeignKey<MatchRecord, RefereesRecord> FK_MATCH_REFEREES = Internal.createForeignKey(Keys.KEY_REFEREES_PRIMARY, Match.MATCH, "FK_match_referees", new TableField[] { Match.MATCH.MAINREFEREEID }, true);
        public static final ForeignKey<MatchRefereeRecord, MatchRecord> FK_MATCH_REFEREE_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, MatchReferee.MATCH_REFEREE, "FK_match_referee_match", new TableField[] { MatchReferee.MATCH_REFEREE.MATCHID }, true);
        public static final ForeignKey<MatchRefereeRecord, RefereesRecord> FK_MATCH_REFEREE_REFEREES = Internal.createForeignKey(Keys.KEY_REFEREES_PRIMARY, MatchReferee.MATCH_REFEREE, "FK_match_referee_referees", new TableField[] { MatchReferee.MATCH_REFEREE.REFEREEID }, true);
        public static final ForeignKey<MatchingPolicyRecord, LeagueRecord> FK_MATCHING_POLICY_LEAGUE = Internal.createForeignKey(Keys.KEY_LEAGUE_PRIMARY, MatchingPolicy.MATCHING_POLICY, "FK_matching policy_league", new TableField[] { MatchingPolicy.MATCHING_POLICY.LEAGUEID }, true);
        public static final ForeignKey<OffsideRecord, MatchRecord> FK_OFFSIDE_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, Offside.OFFSIDE, "FK_offside_match", new TableField[] { Offside.OFFSIDE.MATCHID }, true);
        public static final ForeignKey<OffsideRecord, PlayersRecord> FK_OFFSIDE_PLAYERS = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Offside.OFFSIDE, "FK_offside_players", new TableField[] { Offside.OFFSIDE.PLAYEROFFSIDEID }, true);
        public static final ForeignKey<OwnerManagerAssigningsRecord, TeamsRecord> FK_OWNER_MANAGER_ASSIGNINGS_TEAMS = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, OwnerManagerAssignings.OWNER_MANAGER_ASSIGNINGS, "FK_owner_manager_assignings_teams", new TableField[] { OwnerManagerAssignings.OWNER_MANAGER_ASSIGNINGS.TEAMID }, true);
        public static final ForeignKey<OwnerManagerAssigningsRecord, TeammanagersRecord> FK_OWNER_MANAGER_ASSIGNINGS_TEAMMANAGERS = Internal.createForeignKey(Keys.KEY_TEAMMANAGERS_PRIMARY, OwnerManagerAssignings.OWNER_MANAGER_ASSIGNINGS, "FK_owner_manager_assignings_teammanagers", new TableField[] { OwnerManagerAssignings.OWNER_MANAGER_ASSIGNINGS.TEAMMANAGERID }, true);
        public static final ForeignKey<OwnerOwnerAssigningsRecord, TeamsRecord> FK_OWNER_OWNER_ASSIGNINGS_TEAMS = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, OwnerOwnerAssignings.OWNER_OWNER_ASSIGNINGS, "FK_owner_owner_assignings_teams", new TableField[] { OwnerOwnerAssignings.OWNER_OWNER_ASSIGNINGS.TEAMID }, true);
        public static final ForeignKey<OwnerOwnerAssigningsRecord, SubscribersRecord> FK_OWNER_OWNER_ASSIGNINGS_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, OwnerOwnerAssignings.OWNER_OWNER_ASSIGNINGS, "FK_owner_owner_assignings_subscribers", new TableField[] { OwnerOwnerAssignings.OWNER_OWNER_ASSIGNINGS.ASSIGNEEID }, true);
        public static final ForeignKey<OwnerTeamsRecord, SubscribersRecord> FK_OWNER_TEAMS_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, OwnerTeams.OWNER_TEAMS, "FK_owner_teams_subscribers", new TableField[] { OwnerTeams.OWNER_TEAMS.OWNERID }, true);
        public static final ForeignKey<OwnerTeamsRecord, TeamsRecord> TEAMFK = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, OwnerTeams.OWNER_TEAMS, "teamfk", new TableField[] { OwnerTeams.OWNER_TEAMS.TEAMID }, true);
        public static final ForeignKey<OwnersOfStadiumRecord, StadiumRecord> FK_OWNERS_OF_STADIUM_STADIUM = Internal.createForeignKey(Keys.KEY_STADIUM_PRIMARY, OwnersOfStadium.OWNERS_OF_STADIUM, "FK_owners_of_stadium_stadium", new TableField[] { OwnersOfStadium.OWNERS_OF_STADIUM.STADIUMID }, true);
        public static final ForeignKey<OwnersOfStadiumRecord, TeamsRecord> FK_OWNERS_OF_STADIUM_TEAMS = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, OwnersOfStadium.OWNERS_OF_STADIUM, "FK_owners_of_stadium_teams", new TableField[] { OwnersOfStadium.OWNERS_OF_STADIUM.TEAMID }, true);
        public static final ForeignKey<PageOwnerRecord, PagesRecord> FK_PAGE_OWNER_PAGES = Internal.createForeignKey(Keys.KEY_PAGES_PRIMARY, PageOwner.PAGE_OWNER, "FK_page_owner_pages", new TableField[] { PageOwner.PAGE_OWNER.PAGEID }, true);
        public static final ForeignKey<PagePostRecord, PagesRecord> FK_PAGE_POST_PAGES = Internal.createForeignKey(Keys.KEY_PAGES_PRIMARY, PagePost.PAGE_POST, "FK_page_post_pages", new TableField[] { PagePost.PAGE_POST.PAGEID }, true);
        public static final ForeignKey<PlayersRecord, SubscribersRecord> FK_PLAYERS_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, Players.PLAYERS, "FK_players_subscribers", new TableField[] { Players.PLAYERS.PLAYERID }, true);
        public static final ForeignKey<PlayersRecord, TeamsRecord> TEAMID = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, Players.PLAYERS, "teamID", new TableField[] { Players.PLAYERS.TEAMID }, true);
        public static final ForeignKey<PreviousGamesInStadiumRecord, StadiumRecord> FK_PREVIOUS_GAMES_IN_STADIUM_STADIUM = Internal.createForeignKey(Keys.KEY_STADIUM_PRIMARY, PreviousGamesInStadium.PREVIOUS_GAMES_IN_STADIUM, "FK_previous_games_in_stadium_stadium", new TableField[] { PreviousGamesInStadium.PREVIOUS_GAMES_IN_STADIUM.STADIUMID }, true);
        public static final ForeignKey<PreviousGamesInStadiumRecord, MatchRecord> FK_PREVIOUS_GAMES_IN_STADIUM_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, PreviousGamesInStadium.PREVIOUS_GAMES_IN_STADIUM, "FK_previous_games_in_stadium_match", new TableField[] { PreviousGamesInStadium.PREVIOUS_GAMES_IN_STADIUM.MATCHID }, true);
        public static final ForeignKey<RankingpolicyRecord, LeagueRecord> FK_RANKINGPOLICY_LEAGUE = Internal.createForeignKey(Keys.KEY_LEAGUE_PRIMARY, Rankingpolicy.RANKINGPOLICY, "FK_rankingpolicy_league", new TableField[] { Rankingpolicy.RANKINGPOLICY.LEAGUEID }, true);
        public static final ForeignKey<RedcardRecord, MatchRecord> FK_REDCARD_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, Redcard.REDCARD, "FK_redcard_match", new TableField[] { Redcard.REDCARD.MATCHID }, true);
        public static final ForeignKey<RedcardRecord, PlayersRecord> FK_REDCARD_PLAYERS = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Redcard.REDCARD, "FK_redcard_players", new TableField[] { Redcard.REDCARD.PLAYERAGAINSTID }, true);
        public static final ForeignKey<RefereeMatchesRecord, RefereesRecord> FK_REFEREE_MATCHES_REFEREES = Internal.createForeignKey(Keys.KEY_REFEREES_PRIMARY, RefereeMatches.REFEREE_MATCHES, "FK_referee_matches_referees", new TableField[] { RefereeMatches.REFEREE_MATCHES.REFEREEID }, true);
        public static final ForeignKey<RefereeMatchesRecord, MatchRecord> FK_REFEREE_MATCHES_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, RefereeMatches.REFEREE_MATCHES, "FK_Referee_Matches_match", new TableField[] { RefereeMatches.REFEREE_MATCHES.MATCHID }, true);
        public static final ForeignKey<RefereesRecord, SubscribersRecord> FK_REFEREES_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, Referees.REFEREES, "FK_referees_subscribers", new TableField[] { Referees.REFEREES.REFEREEID }, true);
        public static final ForeignKey<SeasonMatchesRecord, LeagueRecord> FK_SEASON_MATCHES_LEAGUE = Internal.createForeignKey(Keys.KEY_LEAGUE_PRIMARY, SeasonMatches.SEASON_MATCHES, "FK_season_matches_league", new TableField[] { SeasonMatches.SEASON_MATCHES.LEAGUEID }, true);
        public static final ForeignKey<SeasonMatchesRecord, MatchRecord> FK_SEASON_MATCHES_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, SeasonMatches.SEASON_MATCHES, "FK_season_matches_match", new TableField[] { SeasonMatches.SEASON_MATCHES.MATCHID }, true);
        public static final ForeignKey<SeasonRefereeRecord, LeagueRecord> FK_SEASON_REFEREE_LEAGUE = Internal.createForeignKey(Keys.KEY_LEAGUE_PRIMARY, SeasonReferee.SEASON_REFEREE, "FK_season_referee_league", new TableField[] { SeasonReferee.SEASON_REFEREE.LEAGUEID }, true);
        public static final ForeignKey<SeasonRefereeRecord, RefereesRecord> FK_SEASON_REFEREE_REFEREES = Internal.createForeignKey(Keys.KEY_REFEREES_PRIMARY, SeasonReferee.SEASON_REFEREE, "FK_season_referee_referees", new TableField[] { SeasonReferee.SEASON_REFEREE.REFEREEID }, true);
        public static final ForeignKey<SeasonTableleagueRecord, LeagueRecord> FK_SEASON_TABLELEAGUE_LEAGUE = Internal.createForeignKey(Keys.KEY_LEAGUE_PRIMARY, SeasonTableleague.SEASON_TABLELEAGUE, "FK_season_tableleague_league", new TableField[] { SeasonTableleague.SEASON_TABLELEAGUE.LEAGUEID }, true);
        public static final ForeignKey<SeasonTableleagueRecord, TeamsRecord> FK_SEASON_TABLELEAGUE_TEAMS = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, SeasonTableleague.SEASON_TABLELEAGUE, "FK_season_tableleague_teams", new TableField[] { SeasonTableleague.SEASON_TABLELEAGUE.TEAMID }, true);
        public static final ForeignKey<SeasonTeamsRecord, LeagueRecord> FK_SEASON_TEAMS_LEAGUE = Internal.createForeignKey(Keys.KEY_LEAGUE_PRIMARY, SeasonTeams.SEASON_TEAMS, "FK_season_teams_league", new TableField[] { SeasonTeams.SEASON_TEAMS.LEAGUEID }, true);
        public static final ForeignKey<SeasonTeamsRecord, TeamsRecord> FK_SEASON_TEAMS_TEAMS = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, SeasonTeams.SEASON_TEAMS, "FK_season_teams_teams", new TableField[] { SeasonTeams.SEASON_TEAMS.TEAMID }, true);
        public static final ForeignKey<SeasonsRecord, LeagueRecord> FK_SEASONS_LEAGUE = Internal.createForeignKey(Keys.KEY_LEAGUE_PRIMARY, Seasons.SEASONS, "FK_seasons_league", new TableField[] { Seasons.SEASONS.LEAGUEID }, true);
        public static final ForeignKey<SubstituteRecord, MatchRecord> FK_SUBSTITUTE_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, Substitute.SUBSTITUTE, "FK_substitute_match", new TableField[] { Substitute.SUBSTITUTE.MATCHID }, true);
        public static final ForeignKey<SubstituteRecord, PlayersRecord> FK_SUBSTITUTE_PLAYERS = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Substitute.SUBSTITUTE, "FK_substitute_players", new TableField[] { Substitute.SUBSTITUTE.PLAYERINID }, true);
        public static final ForeignKey<SubstituteRecord, PlayersRecord> FK_SUBSTITUTE_PLAYERS_2 = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Substitute.SUBSTITUTE, "FK_substitute_players_2", new TableField[] { Substitute.SUBSTITUTE.PLAYEROUTID }, true);
        public static final ForeignKey<TeamPlayersRecord, TeamsRecord> FK_TEAM_PLAYERS_TEAMS = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, TeamPlayers.TEAM_PLAYERS, "FK_team_players_teams", new TableField[] { TeamPlayers.TEAM_PLAYERS.TEAMID }, true);
        public static final ForeignKey<TeamPlayersRecord, PlayersRecord> FK_TEAM_PLAYERS_PLAYERS = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, TeamPlayers.TEAM_PLAYERS, "FK_team_players_players", new TableField[] { TeamPlayers.TEAM_PLAYERS.PLAYERID }, true);
        public static final ForeignKey<TeammanagersRecord, SubscribersRecord> FK_TEAMMANAGERS_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, Teammanagers.TEAMMANAGERS, "FK_teammanagers_subscribers", new TableField[] { Teammanagers.TEAMMANAGERS.MANAGERID }, true);
        public static final ForeignKey<TeammanagersRecord, TeamsRecord> FK_TEAMMANAGERS_TEAMS = Internal.createForeignKey(Keys.KEY_TEAMS_PRIMARY, Teammanagers.TEAMMANAGERS, "FK_teammanagers_teams", new TableField[] { Teammanagers.TEAMMANAGERS.TEAMID }, true);
        public static final ForeignKey<TeammanagersRecord, TeamownerOwnereligibleRecord> TEAMOWNERID = Internal.createForeignKey(Keys.KEY_TEAMOWNER_OWNERELIGIBLE_PRIMARY, Teammanagers.TEAMMANAGERS, "teamOwnerID", new TableField[] { Teammanagers.TEAMMANAGERS.TEAMOWNERID_FICTIVE }, true);
        public static final ForeignKey<TeamownerOwnereligibleRecord, SubscribersRecord> FK_TEAMOWNER_OWNERELIGIBLE_SUBSCRIBERS1 = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE, "FK_teamowner_ownereligible_subscribers1", new TableField[] { TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE.OWNERID }, true);
        public static final ForeignKey<TeamownerOwnereligibleRecord, PlayersRecord> FK_TEAMOWNER_OWNERELIGIBLE_PLAYERS1 = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE, "FK_teamowner_ownereligible_players1", new TableField[] { TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE.PLAYERID }, true);
        public static final ForeignKey<TeamownerOwnereligibleRecord, TeammanagersRecord> FK_TEAMOWNER_OWNERELIGIBLE_TEAMMANAGERS1 = Internal.createForeignKey(Keys.KEY_TEAMMANAGERS_PRIMARY, TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE, "FK_teamowner_ownereligible_teammanagers1", new TableField[] { TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE.MANAGERID }, true);
        public static final ForeignKey<TeamownerOwnereligibleRecord, CoachesRecord> FK_TEAMOWNER_OWNERELIGIBLE_COACHES1 = Internal.createForeignKey(Keys.KEY_COACHES_PRIMARY, TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE, "FK_teamowner_ownereligible_coaches1", new TableField[] { TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE.COACHID }, true);
        public static final ForeignKey<TeamsRecord, TeammanagersRecord> FK_TEAMS_TEAMMANAGERS = Internal.createForeignKey(Keys.KEY_TEAMMANAGERS_PRIMARY, Teams.TEAMS, "FK_teams_teammanagers", new TableField[] { Teams.TEAMS.TEAMMANAGERID }, true);
        public static final ForeignKey<UnconfirmedTeamsRecord, SubscribersRecord> FK_UNCONFIRMED_TEAMS_SUBSCRIBERS = Internal.createForeignKey(Keys.KEY_SUBSCRIBERS_PRIMARY, UnconfirmedTeams.UNCONFIRMED_TEAMS, "FK_unconfirmed_teams_subscribers", new TableField[] { UnconfirmedTeams.UNCONFIRMED_TEAMS.OWNERID }, true);
        public static final ForeignKey<YellowcardRecord, MatchRecord> FK_YELLOWCARD_MATCH = Internal.createForeignKey(Keys.KEY_MATCH_PRIMARY, Yellowcard.YELLOWCARD, "FK_yellowcard_match", new TableField[] { Yellowcard.YELLOWCARD.MATCHID }, true);
        public static final ForeignKey<YellowcardRecord, PlayersRecord> FK_YELLOWCARD_PLAYERS = Internal.createForeignKey(Keys.KEY_PLAYERS_PRIMARY, Yellowcard.YELLOWCARD, "FK_yellowcard_players", new TableField[] { Yellowcard.YELLOWCARD.PLAYERAGAINSTID }, true);
    }
}
