/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables;


import dataLayer.Tables.tables.Admins;
import dataLayer.Tables.tables.ApprovalRequests;
import dataLayer.Tables.tables.Ars;
import dataLayer.Tables.tables.CoachTeam;
import dataLayer.Tables.tables.Coaches;
import dataLayer.Tables.tables.Complaints;
import dataLayer.Tables.tables.Eventrecorder;
import dataLayer.Tables.tables.EventsrecorderEvents;
import dataLayer.Tables.tables.Fans;
import dataLayer.Tables.tables.Foul;
import dataLayer.Tables.tables.Goal;
import dataLayer.Tables.tables.Injury;
import dataLayer.Tables.tables.League;
import dataLayer.Tables.tables.Logs;
import dataLayer.Tables.tables.Match;
import dataLayer.Tables.tables.MatchReferee;
import dataLayer.Tables.tables.MatchingPolicy;
import dataLayer.Tables.tables.Offside;
import dataLayer.Tables.tables.OwnerManagerAssignings;
import dataLayer.Tables.tables.OwnerOwnerAssignings;
import dataLayer.Tables.tables.OwnerTeams;
import dataLayer.Tables.tables.OwnersOfStadium;
import dataLayer.Tables.tables.PageOwner;
import dataLayer.Tables.tables.PagePost;
import dataLayer.Tables.tables.Pages;
import dataLayer.Tables.tables.Players;
import dataLayer.Tables.tables.PreviousGamesInStadium;
import dataLayer.Tables.tables.Rankingpolicy;
import dataLayer.Tables.tables.Redcard;
import dataLayer.Tables.tables.RefereeMatches;
import dataLayer.Tables.tables.Referees;
import dataLayer.Tables.tables.SeasonMatches;
import dataLayer.Tables.tables.SeasonReferee;
import dataLayer.Tables.tables.SeasonTableleague;
import dataLayer.Tables.tables.SeasonTeams;
import dataLayer.Tables.tables.Seasons;
import dataLayer.Tables.tables.Stadium;
import dataLayer.Tables.tables.Subscribers;
import dataLayer.Tables.tables.Substitute;
import dataLayer.Tables.tables.TeamPlayers;
import dataLayer.Tables.tables.Teammanagers;
import dataLayer.Tables.tables.TeamownerOwnereligible;
import dataLayer.Tables.tables.Teams;
import dataLayer.Tables.tables.UnconfirmedTeams;
import dataLayer.Tables.tables.Yellowcard;

import java.util.Arrays;
import java.util.List;

import org.jooq.Catalog;
import org.jooq.Table;
import org.jooq.impl.SchemaImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Testdb3 extends SchemaImpl {

    private static final long serialVersionUID = -593956340;

    /**
     * The reference instance of <code>testdb3</code>
     */
    public static final Testdb3 TESTDB3 = new Testdb3();

    /**
     * The table <code>testdb3.admins</code>.
     */
    public final Admins ADMINS = Admins.ADMINS;

    /**
     * The table <code>testdb3.approval_requests</code>.
     */
    public final ApprovalRequests APPROVAL_REQUESTS = ApprovalRequests.APPROVAL_REQUESTS;

    /**
     * The table <code>testdb3.ars</code>.
     */
    public final Ars ARS = Ars.ARS;

    /**
     * The table <code>testdb3.coach_team</code>.
     */
    public final CoachTeam COACH_TEAM = CoachTeam.COACH_TEAM;

    /**
     * The table <code>testdb3.coaches</code>.
     */
    public final Coaches COACHES = Coaches.COACHES;

    /**
     * The table <code>testdb3.complaints</code>.
     */
    public final Complaints COMPLAINTS = Complaints.COMPLAINTS;

    /**
     * The table <code>testdb3.eventrecorder</code>.
     */
    public final Eventrecorder EVENTRECORDER = Eventrecorder.EVENTRECORDER;

    /**
     * The table <code>testdb3.eventsrecorder_events</code>.
     */
    public final EventsrecorderEvents EVENTSRECORDER_EVENTS = EventsrecorderEvents.EVENTSRECORDER_EVENTS;

    /**
     * The table <code>testdb3.fans</code>.
     */
    public final Fans FANS = Fans.FANS;

    /**
     * The table <code>testdb3.foul</code>.
     */
    public final Foul FOUL = Foul.FOUL;

    /**
     * The table <code>testdb3.goal</code>.
     */
    public final Goal GOAL = Goal.GOAL;

    /**
     * The table <code>testdb3.injury</code>.
     */
    public final Injury INJURY = Injury.INJURY;

    /**
     * The table <code>testdb3.league</code>.
     */
    public final League LEAGUE = League.LEAGUE;

    /**
     * The table <code>testdb3.logs</code>.
     */
    public final Logs LOGS = Logs.LOGS;

    /**
     * The table <code>testdb3.match</code>.
     */
    public final Match MATCH = Match.MATCH;

    /**
     * The table <code>testdb3.match_referee</code>.
     */
    public final MatchReferee MATCH_REFEREE = MatchReferee.MATCH_REFEREE;

    /**
     * The table <code>testdb3.matching policy</code>.
     */
    public final MatchingPolicy MATCHING_POLICY = MatchingPolicy.MATCHING_POLICY;

    /**
     * The table <code>testdb3.offside</code>.
     */
    public final Offside OFFSIDE = Offside.OFFSIDE;

    /**
     * The table <code>testdb3.owner_manager_assignings</code>.
     */
    public final OwnerManagerAssignings OWNER_MANAGER_ASSIGNINGS = OwnerManagerAssignings.OWNER_MANAGER_ASSIGNINGS;

    /**
     * The table <code>testdb3.owner_owner_assignings</code>.
     */
    public final OwnerOwnerAssignings OWNER_OWNER_ASSIGNINGS = OwnerOwnerAssignings.OWNER_OWNER_ASSIGNINGS;

    /**
     * The table <code>testdb3.owner_teams</code>.
     */
    public final OwnerTeams OWNER_TEAMS = OwnerTeams.OWNER_TEAMS;

    /**
     * The table <code>testdb3.owners_of_stadium</code>.
     */
    public final OwnersOfStadium OWNERS_OF_STADIUM = OwnersOfStadium.OWNERS_OF_STADIUM;

    /**
     * The table <code>testdb3.page_owner</code>.
     */
    public final PageOwner PAGE_OWNER = PageOwner.PAGE_OWNER;

    /**
     * all posts of username
     */
    public final PagePost PAGE_POST = PagePost.PAGE_POST;

    /**
     * The table <code>testdb3.pages</code>.
     */
    public final Pages PAGES = Pages.PAGES;

    /**
     * The table <code>testdb3.players</code>.
     */
    public final Players PLAYERS = Players.PLAYERS;

    /**
     * The table <code>testdb3.previous_games_in_stadium</code>.
     */
    public final PreviousGamesInStadium PREVIOUS_GAMES_IN_STADIUM = PreviousGamesInStadium.PREVIOUS_GAMES_IN_STADIUM;

    /**
     * The table <code>testdb3.rankingpolicy</code>.
     */
    public final Rankingpolicy RANKINGPOLICY = Rankingpolicy.RANKINGPOLICY;

    /**
     * The table <code>testdb3.redcard</code>.
     */
    public final Redcard REDCARD = Redcard.REDCARD;

    /**
     * The table <code>testdb3.referee_matches</code>.
     */
    public final RefereeMatches REFEREE_MATCHES = RefereeMatches.REFEREE_MATCHES;

    /**
     * The table <code>testdb3.referees</code>.
     */
    public final Referees REFEREES = Referees.REFEREES;

    /**
     * The table <code>testdb3.season_matches</code>.
     */
    public final SeasonMatches SEASON_MATCHES = SeasonMatches.SEASON_MATCHES;

    /**
     * The table <code>testdb3.season_referee</code>.
     */
    public final SeasonReferee SEASON_REFEREE = SeasonReferee.SEASON_REFEREE;

    /**
     * The table <code>testdb3.season_tableleague</code>.
     */
    public final SeasonTableleague SEASON_TABLELEAGUE = SeasonTableleague.SEASON_TABLELEAGUE;

    /**
     * The table <code>testdb3.season_teams</code>.
     */
    public final SeasonTeams SEASON_TEAMS = SeasonTeams.SEASON_TEAMS;

    /**
     * The table <code>testdb3.seasons</code>.
     */
    public final Seasons SEASONS = Seasons.SEASONS;

    /**
     * The table <code>testdb3.stadium</code>.
     */
    public final Stadium STADIUM = Stadium.STADIUM;

    /**
     * The table <code>testdb3.subscribers</code>.
     */
    public final Subscribers SUBSCRIBERS = Subscribers.SUBSCRIBERS;

    /**
     * The table <code>testdb3.substitute</code>.
     */
    public final Substitute SUBSTITUTE = Substitute.SUBSTITUTE;

    /**
     * The table <code>testdb3.team_players</code>.
     */
    public final TeamPlayers TEAM_PLAYERS = TeamPlayers.TEAM_PLAYERS;

    /**
     * The table <code>testdb3.teammanagers</code>.
     */
    public final Teammanagers TEAMMANAGERS = Teammanagers.TEAMMANAGERS;

    /**
     * The table <code>testdb3.teamowner_ownereligible</code>.
     */
    public final TeamownerOwnereligible TEAMOWNER_OWNERELIGIBLE = TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE;

    /**
     * The table <code>testdb3.teams</code>.
     */
    public final Teams TEAMS = Teams.TEAMS;

    /**
     * all teams pending approval
     */
    public final UnconfirmedTeams UNCONFIRMED_TEAMS = UnconfirmedTeams.UNCONFIRMED_TEAMS;

    /**
     * The table <code>testdb3.yellowcard</code>.
     */
    public final Yellowcard YELLOWCARD = Yellowcard.YELLOWCARD;

    /**
     * No further instances allowed
     */
    private Testdb3() {
        super("testdb3", null);
    }


    @Override
    public Catalog getCatalog() {
        return DefaultCatalog.DEFAULT_CATALOG;
    }

    @Override
    public final List<Table<?>> getTables() {
        return Arrays.<Table<?>>asList(
            Admins.ADMINS,
            ApprovalRequests.APPROVAL_REQUESTS,
            Ars.ARS,
            CoachTeam.COACH_TEAM,
            Coaches.COACHES,
            Complaints.COMPLAINTS,
            Eventrecorder.EVENTRECORDER,
            EventsrecorderEvents.EVENTSRECORDER_EVENTS,
            Fans.FANS,
            Foul.FOUL,
            Goal.GOAL,
            Injury.INJURY,
            League.LEAGUE,
            Logs.LOGS,
            Match.MATCH,
            MatchReferee.MATCH_REFEREE,
            MatchingPolicy.MATCHING_POLICY,
            Offside.OFFSIDE,
            OwnerManagerAssignings.OWNER_MANAGER_ASSIGNINGS,
            OwnerOwnerAssignings.OWNER_OWNER_ASSIGNINGS,
            OwnerTeams.OWNER_TEAMS,
            OwnersOfStadium.OWNERS_OF_STADIUM,
            PageOwner.PAGE_OWNER,
            PagePost.PAGE_POST,
            Pages.PAGES,
            Players.PLAYERS,
            PreviousGamesInStadium.PREVIOUS_GAMES_IN_STADIUM,
            Rankingpolicy.RANKINGPOLICY,
            Redcard.REDCARD,
            RefereeMatches.REFEREE_MATCHES,
            Referees.REFEREES,
            SeasonMatches.SEASON_MATCHES,
            SeasonReferee.SEASON_REFEREE,
            SeasonTableleague.SEASON_TABLELEAGUE,
            SeasonTeams.SEASON_TEAMS,
            Seasons.SEASONS,
            Stadium.STADIUM,
            Subscribers.SUBSCRIBERS,
            Substitute.SUBSTITUTE,
            TeamPlayers.TEAM_PLAYERS,
            Teammanagers.TEAMMANAGERS,
            TeamownerOwnereligible.TEAMOWNER_OWNERELIGIBLE,
            Teams.TEAMS,
            UnconfirmedTeams.UNCONFIRMED_TEAMS,
            Yellowcard.YELLOWCARD);
    }
}
