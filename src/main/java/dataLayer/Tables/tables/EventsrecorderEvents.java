/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.Testdb3;
import dataLayer.Tables.tables.records.EventsrecorderEventsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class EventsrecorderEvents extends TableImpl<EventsrecorderEventsRecord> {

    private static final long serialVersionUID = 1100873094;

    /**
     * The reference instance of <code>testdb3.eventsrecorder_events</code>
     */
    public static final EventsrecorderEvents EVENTSRECORDER_EVENTS = new EventsrecorderEvents();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsrecorderEventsRecord> getRecordType() {
        return EventsrecorderEventsRecord.class;
    }

    /**
     * The column <code>testdb3.eventsrecorder_events.matchID</code>.
     */
    public final TableField<EventsrecorderEventsRecord, Integer> MATCHID = createField(DSL.name("matchID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>testdb3.eventsrecorder_events.time</code>.
     */
    public final TableField<EventsrecorderEventsRecord, String> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>testdb3.eventsrecorder_events.eventID</code>.
     */
    public final TableField<EventsrecorderEventsRecord, Integer> EVENTID = createField(DSL.name("eventID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>testdb3.eventsrecorder_events.type</code>.
     */
    public final TableField<EventsrecorderEventsRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>testdb3.eventsrecorder_events</code> table reference
     */
    public EventsrecorderEvents() {
        this(DSL.name("eventsrecorder_events"), null);
    }

    /**
     * Create an aliased <code>testdb3.eventsrecorder_events</code> table reference
     */
    public EventsrecorderEvents(String alias) {
        this(DSL.name(alias), EVENTSRECORDER_EVENTS);
    }

    /**
     * Create an aliased <code>testdb3.eventsrecorder_events</code> table reference
     */
    public EventsrecorderEvents(Name alias) {
        this(alias, EVENTSRECORDER_EVENTS);
    }

    private EventsrecorderEvents(Name alias, Table<EventsrecorderEventsRecord> aliased) {
        this(alias, aliased, null);
    }

    private EventsrecorderEvents(Name alias, Table<EventsrecorderEventsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> EventsrecorderEvents(Table<O> child, ForeignKey<O, EventsrecorderEventsRecord> key) {
        super(child, key, EVENTSRECORDER_EVENTS);
    }

    @Override
    public Schema getSchema() {
        return Testdb3.TESTDB3;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.EVENTSRECORDER_EVENTS_EVENTID, Indexes.EVENTSRECORDER_EVENTS_MATCHID);
    }

    @Override
    public List<UniqueKey<EventsrecorderEventsRecord>> getKeys() {
        return Arrays.<UniqueKey<EventsrecorderEventsRecord>>asList(Keys.KEY_EVENTSRECORDER_EVENTS_MATCHID_EVENTID);
    }

    @Override
    public List<ForeignKey<EventsrecorderEventsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventsrecorderEventsRecord, ?>>asList(Keys.FK__MATCH);
    }

    public Match match() {
        return new Match(this, Keys.FK__MATCH);
    }

    @Override
    public EventsrecorderEvents as(String alias) {
        return new EventsrecorderEvents(DSL.name(alias), this);
    }

    @Override
    public EventsrecorderEvents as(Name alias) {
        return new EventsrecorderEvents(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsrecorderEvents rename(String name) {
        return new EventsrecorderEvents(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public EventsrecorderEvents rename(Name name) {
        return new EventsrecorderEvents(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, Integer, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
