/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Demodb;
import dataLayer.Tables.Keys;
import dataLayer.Tables.tables.records.MatchingPolicyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MatchingPolicy extends TableImpl<MatchingPolicyRecord> {

    private static final long serialVersionUID = -1628175279;

    /**
     * The reference instance of <code>demodb.matching policy</code>
     */
    public static final MatchingPolicy MATCHING_POLICY = new MatchingPolicy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchingPolicyRecord> getRecordType() {
        return MatchingPolicyRecord.class;
    }

    /**
     * The column <code>demodb.matching policy.LeagueID</code>.
     */
    public final TableField<MatchingPolicyRecord, String> LEAGUEID = createField(DSL.name("LeagueID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>demodb.matching policy.SeasonID</code>.
     */
    public final TableField<MatchingPolicyRecord, Integer> SEASONID = createField(DSL.name("SeasonID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>demodb.matching policy.Type</code>.
     */
    public final TableField<MatchingPolicyRecord, String> TYPE = createField(DSL.name("Type"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>demodb.matching policy</code> table reference
     */
    public MatchingPolicy() {
        this(DSL.name("matching policy"), null);
    }

    /**
     * Create an aliased <code>demodb.matching policy</code> table reference
     */
    public MatchingPolicy(String alias) {
        this(DSL.name(alias), MATCHING_POLICY);
    }

    /**
     * Create an aliased <code>demodb.matching policy</code> table reference
     */
    public MatchingPolicy(Name alias) {
        this(alias, MATCHING_POLICY);
    }

    private MatchingPolicy(Name alias, Table<MatchingPolicyRecord> aliased) {
        this(alias, aliased, null);
    }

    private MatchingPolicy(Name alias, Table<MatchingPolicyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MatchingPolicy(Table<O> child, ForeignKey<O, MatchingPolicyRecord> key) {
        super(child, key, MATCHING_POLICY);
    }

    @Override
    public Schema getSchema() {
        return Demodb.DEMODB;
    }

    @Override
    public UniqueKey<MatchingPolicyRecord> getPrimaryKey() {
        return Keys.KEY_MATCHING_POLICY_PRIMARY;
    }

    @Override
    public List<UniqueKey<MatchingPolicyRecord>> getKeys() {
        return Arrays.<UniqueKey<MatchingPolicyRecord>>asList(Keys.KEY_MATCHING_POLICY_PRIMARY);
    }

    @Override
    public List<ForeignKey<MatchingPolicyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MatchingPolicyRecord, ?>>asList(Keys.FK_MATCHING_POLICY_LEAGUE);
    }

    public League league() {
        return new League(this, Keys.FK_MATCHING_POLICY_LEAGUE);
    }

    @Override
    public MatchingPolicy as(String alias) {
        return new MatchingPolicy(DSL.name(alias), this);
    }

    @Override
    public MatchingPolicy as(Name alias) {
        return new MatchingPolicy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchingPolicy rename(String name) {
        return new MatchingPolicy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchingPolicy rename(Name name) {
        return new MatchingPolicy(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
