/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.Localsoccer;
import dataLayer.Tables.tables.records.SeasonTableleagueRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SeasonTableleague extends TableImpl<SeasonTableleagueRecord> {

    private static final long serialVersionUID = 688681065;

    /**
     * The reference instance of <code>localsoccer.season_tableleague</code>
     */
    public static final SeasonTableleague SEASON_TABLELEAGUE = new SeasonTableleague();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeasonTableleagueRecord> getRecordType() {
        return SeasonTableleagueRecord.class;
    }

    /**
     * The column <code>localsoccer.season_tableleague.LeagueID</code>.
     */
    public final TableField<SeasonTableleagueRecord, String> LEAGUEID = createField(DSL.name("LeagueID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>localsoccer.season_tableleague.SeasonID</code>.
     */
    public final TableField<SeasonTableleagueRecord, Integer> SEASONID = createField(DSL.name("SeasonID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>localsoccer.season_tableleague.TeamID</code>.
     */
    public final TableField<SeasonTableleagueRecord, String> TEAMID = createField(DSL.name("TeamID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>localsoccer.season_tableleague.numOfGames</code>.
     */
    public final TableField<SeasonTableleagueRecord, Integer> NUMOFGAMES = createField(DSL.name("numOfGames"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>localsoccer.season_tableleague.goalsFor</code>.
     */
    public final TableField<SeasonTableleagueRecord, Integer> GOALSFOR = createField(DSL.name("goalsFor"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>localsoccer.season_tableleague.goalsAgainst</code>.
     */
    public final TableField<SeasonTableleagueRecord, Integer> GOALSAGAINST = createField(DSL.name("goalsAgainst"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>localsoccer.season_tableleague.Points</code>.
     */
    public final TableField<SeasonTableleagueRecord, Integer> POINTS = createField(DSL.name("Points"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>localsoccer.season_tableleague</code> table reference
     */
    public SeasonTableleague() {
        this(DSL.name("season_tableleague"), null);
    }

    /**
     * Create an aliased <code>localsoccer.season_tableleague</code> table reference
     */
    public SeasonTableleague(String alias) {
        this(DSL.name(alias), SEASON_TABLELEAGUE);
    }

    /**
     * Create an aliased <code>localsoccer.season_tableleague</code> table reference
     */
    public SeasonTableleague(Name alias) {
        this(alias, SEASON_TABLELEAGUE);
    }

    private SeasonTableleague(Name alias, Table<SeasonTableleagueRecord> aliased) {
        this(alias, aliased, null);
    }

    private SeasonTableleague(Name alias, Table<SeasonTableleagueRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SeasonTableleague(Table<O> child, ForeignKey<O, SeasonTableleagueRecord> key) {
        super(child, key, SEASON_TABLELEAGUE);
    }

    @Override
    public Schema getSchema() {
        return Localsoccer.LOCALSOCCER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SEASON_TABLELEAGUE_LEAGUEID);
    }

    @Override
    public List<ForeignKey<SeasonTableleagueRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SeasonTableleagueRecord, ?>>asList(Keys.FK_SEASON_TABLELEAGUE_LEAGUE, Keys.FK_SEASON_TABLELEAGUE_TEAMS);
    }

    public League league() {
        return new League(this, Keys.FK_SEASON_TABLELEAGUE_LEAGUE);
    }

    public Teams teams() {
        return new Teams(this, Keys.FK_SEASON_TABLELEAGUE_TEAMS);
    }

    @Override
    public SeasonTableleague as(String alias) {
        return new SeasonTableleague(DSL.name(alias), this);
    }

    @Override
    public SeasonTableleague as(Name alias) {
        return new SeasonTableleague(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SeasonTableleague rename(String name) {
        return new SeasonTableleague(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeasonTableleague rename(Name name) {
        return new SeasonTableleague(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<String, Integer, String, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
