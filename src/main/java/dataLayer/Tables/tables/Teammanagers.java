/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Keys;
import dataLayer.Tables.Localsoccer;
import dataLayer.Tables.enums.TeammanagersPermissions;
import dataLayer.Tables.tables.records.TeammanagersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Teammanagers extends TableImpl<TeammanagersRecord> {

    private static final long serialVersionUID = 1988434273;

    /**
     * The reference instance of <code>localsoccer.teammanagers</code>
     */
    public static final Teammanagers TEAMMANAGERS = new Teammanagers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeammanagersRecord> getRecordType() {
        return TeammanagersRecord.class;
    }

    /**
     * The column <code>localsoccer.teammanagers.managerID</code>.
     */
    public final TableField<TeammanagersRecord, String> MANAGERID = createField(DSL.name("managerID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>localsoccer.teammanagers.teamID</code>.
     */
    public final TableField<TeammanagersRecord, String> TEAMID = createField(DSL.name("teamID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>localsoccer.teammanagers.teamOwnerID_fictive</code>.
     */
    public final TableField<TeammanagersRecord, String> TEAMOWNERID_FICTIVE = createField(DSL.name("teamOwnerID_fictive"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>localsoccer.teammanagers.salary</code>.
     */
    public final TableField<TeammanagersRecord, Integer> SALARY = createField(DSL.name("salary"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>localsoccer.teammanagers.permissions</code>.
     */
    public final TableField<TeammanagersRecord, TeammanagersPermissions> PERMISSIONS = createField(DSL.name("permissions"), org.jooq.impl.SQLDataType.VARCHAR(14).nullable(false).defaultValue(org.jooq.impl.DSL.field("'GENERAL'", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(dataLayer.Tables.enums.TeammanagersPermissions.class), this, "");

    /**
     * Create a <code>localsoccer.teammanagers</code> table reference
     */
    public Teammanagers() {
        this(DSL.name("teammanagers"), null);
    }

    /**
     * Create an aliased <code>localsoccer.teammanagers</code> table reference
     */
    public Teammanagers(String alias) {
        this(DSL.name(alias), TEAMMANAGERS);
    }

    /**
     * Create an aliased <code>localsoccer.teammanagers</code> table reference
     */
    public Teammanagers(Name alias) {
        this(alias, TEAMMANAGERS);
    }

    private Teammanagers(Name alias, Table<TeammanagersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Teammanagers(Name alias, Table<TeammanagersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Teammanagers(Table<O> child, ForeignKey<O, TeammanagersRecord> key) {
        super(child, key, TEAMMANAGERS);
    }

    @Override
    public Schema getSchema() {
        return Localsoccer.LOCALSOCCER;
    }

    @Override
    public UniqueKey<TeammanagersRecord> getPrimaryKey() {
        return Keys.KEY_TEAMMANAGERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<TeammanagersRecord>> getKeys() {
        return Arrays.<UniqueKey<TeammanagersRecord>>asList(Keys.KEY_TEAMMANAGERS_PRIMARY);
    }

    @Override
    public List<ForeignKey<TeammanagersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeammanagersRecord, ?>>asList(Keys.FK_TEAMMANAGERS_SUBSCRIBERS, Keys.FK_TEAMMANAGERS_TEAMS, Keys.TEAMOWNERID);
    }

    public Subscribers subscribers() {
        return new Subscribers(this, Keys.FK_TEAMMANAGERS_SUBSCRIBERS);
    }

    public Teams teams() {
        return new Teams(this, Keys.FK_TEAMMANAGERS_TEAMS);
    }

    public TeamownerOwnereligible teamownerOwnereligible() {
        return new TeamownerOwnereligible(this, Keys.TEAMOWNERID);
    }

    @Override
    public Teammanagers as(String alias) {
        return new Teammanagers(DSL.name(alias), this);
    }

    @Override
    public Teammanagers as(Name alias) {
        return new Teammanagers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Teammanagers rename(String name) {
        return new Teammanagers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Teammanagers rename(Name name) {
        return new Teammanagers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, String, String, Integer, TeammanagersPermissions> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
