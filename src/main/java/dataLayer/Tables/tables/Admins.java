/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Keys;
import dataLayer.Tables.Testdb3;
import dataLayer.Tables.tables.records.AdminsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Admins extends TableImpl<AdminsRecord> {

    private static final long serialVersionUID = 2052964522;

    /**
     * The reference instance of <code>testdb3.admins</code>
     */
    public static final Admins ADMINS = new Admins();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminsRecord> getRecordType() {
        return AdminsRecord.class;
    }

    /**
     * The column <code>testdb3.admins.adminID</code>.
     */
    public final TableField<AdminsRecord, String> ADMINID = createField(DSL.name("adminID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>testdb3.admins.approved</code>.
     */
    public final TableField<AdminsRecord, Boolean> APPROVED = createField(DSL.name("approved"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'1'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>testdb3.admins</code> table reference
     */
    public Admins() {
        this(DSL.name("admins"), null);
    }

    /**
     * Create an aliased <code>testdb3.admins</code> table reference
     */
    public Admins(String alias) {
        this(DSL.name(alias), ADMINS);
    }

    /**
     * Create an aliased <code>testdb3.admins</code> table reference
     */
    public Admins(Name alias) {
        this(alias, ADMINS);
    }

    private Admins(Name alias, Table<AdminsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Admins(Name alias, Table<AdminsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Admins(Table<O> child, ForeignKey<O, AdminsRecord> key) {
        super(child, key, ADMINS);
    }

    @Override
    public Schema getSchema() {
        return Testdb3.TESTDB3;
    }

    @Override
    public UniqueKey<AdminsRecord> getPrimaryKey() {
        return Keys.KEY_ADMINS_PRIMARY;
    }

    @Override
    public List<UniqueKey<AdminsRecord>> getKeys() {
        return Arrays.<UniqueKey<AdminsRecord>>asList(Keys.KEY_ADMINS_PRIMARY);
    }

    @Override
    public List<ForeignKey<AdminsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<AdminsRecord, ?>>asList(Keys.FK_ADMINS_SUBSCRIBERS);
    }

    public Subscribers subscribers() {
        return new Subscribers(this, Keys.FK_ADMINS_SUBSCRIBERS);
    }

    @Override
    public Admins as(String alias) {
        return new Admins(DSL.name(alias), this);
    }

    @Override
    public Admins as(Name alias) {
        return new Admins(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Admins rename(String name) {
        return new Admins(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admins rename(Name name) {
        return new Admins(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Boolean> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
