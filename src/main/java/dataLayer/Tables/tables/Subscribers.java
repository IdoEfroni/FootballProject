/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Keys;
import dataLayer.Tables.Testdb3;
import dataLayer.Tables.tables.records.SubscribersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Subscribers extends TableImpl<SubscribersRecord> {

    private static final long serialVersionUID = -740644728;

    /**
     * The reference instance of <code>testdb3.subscribers</code>
     */
    public static final Subscribers SUBSCRIBERS = new Subscribers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubscribersRecord> getRecordType() {
        return SubscribersRecord.class;
    }

    /**
     * The column <code>testdb3.subscribers.SubscriberID</code>.
     */
    public final TableField<SubscribersRecord, String> SUBSCRIBERID = createField(DSL.name("SubscriberID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>testdb3.subscribers.password</code>.
     */
    public final TableField<SubscribersRecord, String> PASSWORD = createField(DSL.name("password"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>testdb3.subscribers.name</code>.
     */
    public final TableField<SubscribersRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>testdb3.subscribers.type</code>.
     */
    public final TableField<SubscribersRecord, String> TYPE = createField(DSL.name("type"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>testdb3.subscribers</code> table reference
     */
    public Subscribers() {
        this(DSL.name("subscribers"), null);
    }

    /**
     * Create an aliased <code>testdb3.subscribers</code> table reference
     */
    public Subscribers(String alias) {
        this(DSL.name(alias), SUBSCRIBERS);
    }

    /**
     * Create an aliased <code>testdb3.subscribers</code> table reference
     */
    public Subscribers(Name alias) {
        this(alias, SUBSCRIBERS);
    }

    private Subscribers(Name alias, Table<SubscribersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Subscribers(Name alias, Table<SubscribersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Subscribers(Table<O> child, ForeignKey<O, SubscribersRecord> key) {
        super(child, key, SUBSCRIBERS);
    }

    @Override
    public Schema getSchema() {
        return Testdb3.TESTDB3;
    }

    @Override
    public UniqueKey<SubscribersRecord> getPrimaryKey() {
        return Keys.KEY_SUBSCRIBERS_PRIMARY;
    }

    @Override
    public List<UniqueKey<SubscribersRecord>> getKeys() {
        return Arrays.<UniqueKey<SubscribersRecord>>asList(Keys.KEY_SUBSCRIBERS_PRIMARY);
    }

    @Override
    public Subscribers as(String alias) {
        return new Subscribers(DSL.name(alias), this);
    }

    @Override
    public Subscribers as(Name alias) {
        return new Subscribers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscribers rename(String name) {
        return new Subscribers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Subscribers rename(Name name) {
        return new Subscribers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
