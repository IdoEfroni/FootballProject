/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Demodb;
import dataLayer.Tables.Keys;
import dataLayer.Tables.tables.records.LogsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Logs extends TableImpl<LogsRecord> {

    private static final long serialVersionUID = -1571651921;

    /**
     * The reference instance of <code>demodb.logs</code>
     */
    public static final Logs LOGS = new Logs();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<LogsRecord> getRecordType() {
        return LogsRecord.class;
    }

    /**
     * The column <code>demodb.logs.index</code>.
     */
    public final TableField<LogsRecord, Integer> INDEX = createField(DSL.name("index"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>demodb.logs.time</code>.
     */
    public final TableField<LogsRecord, String> TIME = createField(DSL.name("time"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>demodb.logs.catrgory</code>.
     */
    public final TableField<LogsRecord, String> CATRGORY = createField(DSL.name("catrgory"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>demodb.logs.info</code>.
     */
    public final TableField<LogsRecord, String> INFO = createField(DSL.name("info"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>demodb.logs</code> table reference
     */
    public Logs() {
        this(DSL.name("logs"), null);
    }

    /**
     * Create an aliased <code>demodb.logs</code> table reference
     */
    public Logs(String alias) {
        this(DSL.name(alias), LOGS);
    }

    /**
     * Create an aliased <code>demodb.logs</code> table reference
     */
    public Logs(Name alias) {
        this(alias, LOGS);
    }

    private Logs(Name alias, Table<LogsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Logs(Name alias, Table<LogsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Logs(Table<O> child, ForeignKey<O, LogsRecord> key) {
        super(child, key, LOGS);
    }

    @Override
    public Schema getSchema() {
        return Demodb.DEMODB;
    }

    @Override
    public Identity<LogsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_LOGS;
    }

    @Override
    public UniqueKey<LogsRecord> getPrimaryKey() {
        return Keys.KEY_LOGS_PRIMARY;
    }

    @Override
    public List<UniqueKey<LogsRecord>> getKeys() {
        return Arrays.<UniqueKey<LogsRecord>>asList(Keys.KEY_LOGS_PRIMARY);
    }

    @Override
    public Logs as(String alias) {
        return new Logs(DSL.name(alias), this);
    }

    @Override
    public Logs as(Name alias) {
        return new Logs(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Logs rename(String name) {
        return new Logs(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Logs rename(Name name) {
        return new Logs(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
