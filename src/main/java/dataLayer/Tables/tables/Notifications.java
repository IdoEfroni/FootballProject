/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Demodb;
import dataLayer.Tables.Keys;
import dataLayer.Tables.tables.records.NotificationsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Notifications extends TableImpl<NotificationsRecord> {

    private static final long serialVersionUID = 1462116721;

    /**
     * The reference instance of <code>demodb.notifications</code>
     */
    public static final Notifications NOTIFICATIONS = new Notifications();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<NotificationsRecord> getRecordType() {
        return NotificationsRecord.class;
    }

    /**
     * The column <code>demodb.notifications.subscriberID</code>.
     */
    public final TableField<NotificationsRecord, String> SUBSCRIBERID = createField(DSL.name("subscriberID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>demodb.notifications.notification</code>.
     */
    public final TableField<NotificationsRecord, String> NOTIFICATION = createField(DSL.name("notification"), org.jooq.impl.SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>demodb.notifications.seen</code>.
     */
    public final TableField<NotificationsRecord, Boolean> SEEN = createField(DSL.name("seen"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>demodb.notifications</code> table reference
     */
    public Notifications() {
        this(DSL.name("notifications"), null);
    }

    /**
     * Create an aliased <code>demodb.notifications</code> table reference
     */
    public Notifications(String alias) {
        this(DSL.name(alias), NOTIFICATIONS);
    }

    /**
     * Create an aliased <code>demodb.notifications</code> table reference
     */
    public Notifications(Name alias) {
        this(alias, NOTIFICATIONS);
    }

    private Notifications(Name alias, Table<NotificationsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Notifications(Name alias, Table<NotificationsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Notifications(Table<O> child, ForeignKey<O, NotificationsRecord> key) {
        super(child, key, NOTIFICATIONS);
    }

    @Override
    public Schema getSchema() {
        return Demodb.DEMODB;
    }

    @Override
    public List<ForeignKey<NotificationsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<NotificationsRecord, ?>>asList(Keys.FK__SUBSCRIBERS5);
    }

    public Subscribers subscribers() {
        return new Subscribers(this, Keys.FK__SUBSCRIBERS5);
    }

    @Override
    public Notifications as(String alias) {
        return new Notifications(DSL.name(alias), this);
    }

    @Override
    public Notifications as(Name alias) {
        return new Notifications(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Notifications rename(String name) {
        return new Notifications(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Notifications rename(Name name) {
        return new Notifications(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, Boolean> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
