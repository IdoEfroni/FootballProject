/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.Testdb3;
import dataLayer.Tables.tables.records.TeamPlayersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TeamPlayers extends TableImpl<TeamPlayersRecord> {

    private static final long serialVersionUID = 192445219;

    /**
     * The reference instance of <code>testdb3.team_players</code>
     */
    public static final TeamPlayers TEAM_PLAYERS = new TeamPlayers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TeamPlayersRecord> getRecordType() {
        return TeamPlayersRecord.class;
    }

    /**
     * The column <code>testdb3.team_players.teamID</code>.
     */
    public final TableField<TeamPlayersRecord, String> TEAMID = createField(DSL.name("teamID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>testdb3.team_players.PlayerID</code>.
     */
    public final TableField<TeamPlayersRecord, String> PLAYERID = createField(DSL.name("PlayerID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>testdb3.team_players</code> table reference
     */
    public TeamPlayers() {
        this(DSL.name("team_players"), null);
    }

    /**
     * Create an aliased <code>testdb3.team_players</code> table reference
     */
    public TeamPlayers(String alias) {
        this(DSL.name(alias), TEAM_PLAYERS);
    }

    /**
     * Create an aliased <code>testdb3.team_players</code> table reference
     */
    public TeamPlayers(Name alias) {
        this(alias, TEAM_PLAYERS);
    }

    private TeamPlayers(Name alias, Table<TeamPlayersRecord> aliased) {
        this(alias, aliased, null);
    }

    private TeamPlayers(Name alias, Table<TeamPlayersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> TeamPlayers(Table<O> child, ForeignKey<O, TeamPlayersRecord> key) {
        super(child, key, TEAM_PLAYERS);
    }

    @Override
    public Schema getSchema() {
        return Testdb3.TESTDB3;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.TEAM_PLAYERS_TEAMID);
    }

    @Override
    public List<UniqueKey<TeamPlayersRecord>> getKeys() {
        return Arrays.<UniqueKey<TeamPlayersRecord>>asList(Keys.KEY_TEAM_PLAYERS_PLAYERID);
    }

    @Override
    public List<ForeignKey<TeamPlayersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<TeamPlayersRecord, ?>>asList(Keys.FK_TEAM_PLAYERS_TEAMS, Keys.FK_TEAM_PLAYERS_PLAYERS);
    }

    public Teams teams() {
        return new Teams(this, Keys.FK_TEAM_PLAYERS_TEAMS);
    }

    public Players players() {
        return new Players(this, Keys.FK_TEAM_PLAYERS_PLAYERS);
    }

    @Override
    public TeamPlayers as(String alias) {
        return new TeamPlayers(DSL.name(alias), this);
    }

    @Override
    public TeamPlayers as(Name alias) {
        return new TeamPlayers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamPlayers rename(String name) {
        return new TeamPlayers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TeamPlayers rename(Name name) {
        return new TeamPlayers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
