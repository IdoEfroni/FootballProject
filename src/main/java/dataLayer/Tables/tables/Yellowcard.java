/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Demodb;
import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.tables.records.YellowcardRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Yellowcard extends TableImpl<YellowcardRecord> {

    private static final long serialVersionUID = -204153905;

    /**
     * The reference instance of <code>demodb.yellowcard</code>
     */
    public static final Yellowcard YELLOWCARD = new Yellowcard();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<YellowcardRecord> getRecordType() {
        return YellowcardRecord.class;
    }

    /**
     * The column <code>demodb.yellowcard.MatchID</code>.
     */
    public final TableField<YellowcardRecord, Integer> MATCHID = createField(DSL.name("MatchID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>demodb.yellowcard.EventID</code>.
     */
    public final TableField<YellowcardRecord, Integer> EVENTID = createField(DSL.name("EventID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>demodb.yellowcard.Time</code>.
     */
    public final TableField<YellowcardRecord, String> TIME = createField(DSL.name("Time"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>demodb.yellowcard.PlayerAgainstID</code>.
     */
    public final TableField<YellowcardRecord, String> PLAYERAGAINSTID = createField(DSL.name("PlayerAgainstID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>demodb.yellowcard</code> table reference
     */
    public Yellowcard() {
        this(DSL.name("yellowcard"), null);
    }

    /**
     * Create an aliased <code>demodb.yellowcard</code> table reference
     */
    public Yellowcard(String alias) {
        this(DSL.name(alias), YELLOWCARD);
    }

    /**
     * Create an aliased <code>demodb.yellowcard</code> table reference
     */
    public Yellowcard(Name alias) {
        this(alias, YELLOWCARD);
    }

    private Yellowcard(Name alias, Table<YellowcardRecord> aliased) {
        this(alias, aliased, null);
    }

    private Yellowcard(Name alias, Table<YellowcardRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Yellowcard(Table<O> child, ForeignKey<O, YellowcardRecord> key) {
        super(child, key, YELLOWCARD);
    }

    @Override
    public Schema getSchema() {
        return Demodb.DEMODB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.YELLOWCARD_MATCHID);
    }

    @Override
    public List<ForeignKey<YellowcardRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<YellowcardRecord, ?>>asList(Keys.FK_YELLOWCARD_MATCH, Keys.FK_YELLOWCARD_PLAYERS);
    }

    public Match match() {
        return new Match(this, Keys.FK_YELLOWCARD_MATCH);
    }

    public Players players() {
        return new Players(this, Keys.FK_YELLOWCARD_PLAYERS);
    }

    @Override
    public Yellowcard as(String alias) {
        return new Yellowcard(DSL.name(alias), this);
    }

    @Override
    public Yellowcard as(Name alias) {
        return new Yellowcard(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Yellowcard rename(String name) {
        return new Yellowcard(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Yellowcard rename(Name name) {
        return new Yellowcard(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, Integer, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
