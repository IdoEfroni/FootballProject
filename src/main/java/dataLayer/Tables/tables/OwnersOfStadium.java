/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Keys;
import dataLayer.Tables.Localsoccer;
import dataLayer.Tables.tables.records.OwnersOfStadiumRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OwnersOfStadium extends TableImpl<OwnersOfStadiumRecord> {

    private static final long serialVersionUID = -694293309;

    /**
     * The reference instance of <code>localsoccer.owners_of_stadium</code>
     */
    public static final OwnersOfStadium OWNERS_OF_STADIUM = new OwnersOfStadium();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OwnersOfStadiumRecord> getRecordType() {
        return OwnersOfStadiumRecord.class;
    }

    /**
     * The column <code>localsoccer.owners_of_stadium.StadiumID</code>.
     */
    public final TableField<OwnersOfStadiumRecord, String> STADIUMID = createField(DSL.name("StadiumID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>localsoccer.owners_of_stadium.TeamID</code>.
     */
    public final TableField<OwnersOfStadiumRecord, String> TEAMID = createField(DSL.name("TeamID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>localsoccer.owners_of_stadium</code> table reference
     */
    public OwnersOfStadium() {
        this(DSL.name("owners_of_stadium"), null);
    }

    /**
     * Create an aliased <code>localsoccer.owners_of_stadium</code> table reference
     */
    public OwnersOfStadium(String alias) {
        this(DSL.name(alias), OWNERS_OF_STADIUM);
    }

    /**
     * Create an aliased <code>localsoccer.owners_of_stadium</code> table reference
     */
    public OwnersOfStadium(Name alias) {
        this(alias, OWNERS_OF_STADIUM);
    }

    private OwnersOfStadium(Name alias, Table<OwnersOfStadiumRecord> aliased) {
        this(alias, aliased, null);
    }

    private OwnersOfStadium(Name alias, Table<OwnersOfStadiumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> OwnersOfStadium(Table<O> child, ForeignKey<O, OwnersOfStadiumRecord> key) {
        super(child, key, OWNERS_OF_STADIUM);
    }

    @Override
    public Schema getSchema() {
        return Localsoccer.LOCALSOCCER;
    }

    @Override
    public UniqueKey<OwnersOfStadiumRecord> getPrimaryKey() {
        return Keys.KEY_OWNERS_OF_STADIUM_PRIMARY;
    }

    @Override
    public List<UniqueKey<OwnersOfStadiumRecord>> getKeys() {
        return Arrays.<UniqueKey<OwnersOfStadiumRecord>>asList(Keys.KEY_OWNERS_OF_STADIUM_PRIMARY);
    }

    @Override
    public List<ForeignKey<OwnersOfStadiumRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OwnersOfStadiumRecord, ?>>asList(Keys.FK_OWNERS_OF_STADIUM_STADIUM, Keys.FK_OWNERS_OF_STADIUM_TEAMS);
    }

    public Stadium stadium() {
        return new Stadium(this, Keys.FK_OWNERS_OF_STADIUM_STADIUM);
    }

    public Teams teams() {
        return new Teams(this, Keys.FK_OWNERS_OF_STADIUM_TEAMS);
    }

    @Override
    public OwnersOfStadium as(String alias) {
        return new OwnersOfStadium(DSL.name(alias), this);
    }

    @Override
    public OwnersOfStadium as(Name alias) {
        return new OwnersOfStadium(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OwnersOfStadium rename(String name) {
        return new OwnersOfStadium(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OwnersOfStadium rename(Name name) {
        return new OwnersOfStadium(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
