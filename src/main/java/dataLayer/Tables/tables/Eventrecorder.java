/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Keys;
import dataLayer.Tables.Localsoccer;
import dataLayer.Tables.tables.records.EventrecorderRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row1;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Eventrecorder extends TableImpl<EventrecorderRecord> {

    private static final long serialVersionUID = -468529975;

    /**
     * The reference instance of <code>localsoccer.eventrecorder</code>
     */
    public static final Eventrecorder EVENTRECORDER = new Eventrecorder();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventrecorderRecord> getRecordType() {
        return EventrecorderRecord.class;
    }

    /**
     * The column <code>localsoccer.eventrecorder.matchID</code>.
     */
    public final TableField<EventrecorderRecord, Integer> MATCHID = createField(DSL.name("matchID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>localsoccer.eventrecorder</code> table reference
     */
    public Eventrecorder() {
        this(DSL.name("eventrecorder"), null);
    }

    /**
     * Create an aliased <code>localsoccer.eventrecorder</code> table reference
     */
    public Eventrecorder(String alias) {
        this(DSL.name(alias), EVENTRECORDER);
    }

    /**
     * Create an aliased <code>localsoccer.eventrecorder</code> table reference
     */
    public Eventrecorder(Name alias) {
        this(alias, EVENTRECORDER);
    }

    private Eventrecorder(Name alias, Table<EventrecorderRecord> aliased) {
        this(alias, aliased, null);
    }

    private Eventrecorder(Name alias, Table<EventrecorderRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Eventrecorder(Table<O> child, ForeignKey<O, EventrecorderRecord> key) {
        super(child, key, EVENTRECORDER);
    }

    @Override
    public Schema getSchema() {
        return Localsoccer.LOCALSOCCER;
    }

    @Override
    public UniqueKey<EventrecorderRecord> getPrimaryKey() {
        return Keys.KEY_EVENTRECORDER_PRIMARY;
    }

    @Override
    public List<UniqueKey<EventrecorderRecord>> getKeys() {
        return Arrays.<UniqueKey<EventrecorderRecord>>asList(Keys.KEY_EVENTRECORDER_PRIMARY);
    }

    @Override
    public List<ForeignKey<EventrecorderRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<EventrecorderRecord, ?>>asList(Keys.FK_EVENTRECORDER_MATCH);
    }

    public Match match() {
        return new Match(this, Keys.FK_EVENTRECORDER_MATCH);
    }

    @Override
    public Eventrecorder as(String alias) {
        return new Eventrecorder(DSL.name(alias), this);
    }

    @Override
    public Eventrecorder as(Name alias) {
        return new Eventrecorder(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Eventrecorder rename(String name) {
        return new Eventrecorder(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Eventrecorder rename(Name name) {
        return new Eventrecorder(name, null);
    }

    // -------------------------------------------------------------------------
    // Row1 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row1<Integer> fieldsRow() {
        return (Row1) super.fieldsRow();
    }
}
