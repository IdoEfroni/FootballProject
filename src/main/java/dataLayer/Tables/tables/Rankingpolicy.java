/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Keys;
import dataLayer.Tables.Localsoccer;
import dataLayer.Tables.tables.records.RankingpolicyRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Rankingpolicy extends TableImpl<RankingpolicyRecord> {

    private static final long serialVersionUID = -187216576;

    /**
     * The reference instance of <code>localsoccer.rankingpolicy</code>
     */
    public static final Rankingpolicy RANKINGPOLICY = new Rankingpolicy();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RankingpolicyRecord> getRecordType() {
        return RankingpolicyRecord.class;
    }

    /**
     * The column <code>localsoccer.rankingpolicy.LeagueID</code>.
     */
    public final TableField<RankingpolicyRecord, String> LEAGUEID = createField(DSL.name("LeagueID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>localsoccer.rankingpolicy.SeasonID</code>.
     */
    public final TableField<RankingpolicyRecord, Integer> SEASONID = createField(DSL.name("SeasonID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>localsoccer.rankingpolicy.win</code>.
     */
    public final TableField<RankingpolicyRecord, Integer> WIN = createField(DSL.name("win"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>localsoccer.rankingpolicy.lose</code>.
     */
    public final TableField<RankingpolicyRecord, Integer> LOSE = createField(DSL.name("lose"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>localsoccer.rankingpolicy.tie</code>.
     */
    public final TableField<RankingpolicyRecord, Integer> TIE = createField(DSL.name("tie"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>localsoccer.rankingpolicy</code> table reference
     */
    public Rankingpolicy() {
        this(DSL.name("rankingpolicy"), null);
    }

    /**
     * Create an aliased <code>localsoccer.rankingpolicy</code> table reference
     */
    public Rankingpolicy(String alias) {
        this(DSL.name(alias), RANKINGPOLICY);
    }

    /**
     * Create an aliased <code>localsoccer.rankingpolicy</code> table reference
     */
    public Rankingpolicy(Name alias) {
        this(alias, RANKINGPOLICY);
    }

    private Rankingpolicy(Name alias, Table<RankingpolicyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Rankingpolicy(Name alias, Table<RankingpolicyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Rankingpolicy(Table<O> child, ForeignKey<O, RankingpolicyRecord> key) {
        super(child, key, RANKINGPOLICY);
    }

    @Override
    public Schema getSchema() {
        return Localsoccer.LOCALSOCCER;
    }

    @Override
    public UniqueKey<RankingpolicyRecord> getPrimaryKey() {
        return Keys.KEY_RANKINGPOLICY_PRIMARY;
    }

    @Override
    public List<UniqueKey<RankingpolicyRecord>> getKeys() {
        return Arrays.<UniqueKey<RankingpolicyRecord>>asList(Keys.KEY_RANKINGPOLICY_PRIMARY);
    }

    @Override
    public List<ForeignKey<RankingpolicyRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RankingpolicyRecord, ?>>asList(Keys.FK_RANKINGPOLICY_LEAGUE);
    }

    public League league() {
        return new League(this, Keys.FK_RANKINGPOLICY_LEAGUE);
    }

    @Override
    public Rankingpolicy as(String alias) {
        return new Rankingpolicy(DSL.name(alias), this);
    }

    @Override
    public Rankingpolicy as(Name alias) {
        return new Rankingpolicy(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Rankingpolicy rename(String name) {
        return new Rankingpolicy(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Rankingpolicy rename(Name name) {
        return new Rankingpolicy(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, Integer, Integer, Integer, Integer> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
