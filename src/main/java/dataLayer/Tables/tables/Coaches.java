/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Keys;
import dataLayer.Tables.Testdb3;
import dataLayer.Tables.enums.CoachesRoleinteam;
import dataLayer.Tables.enums.CoachesTraining;
import dataLayer.Tables.tables.records.CoachesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Coaches extends TableImpl<CoachesRecord> {

    private static final long serialVersionUID = 16571050;

    /**
     * The reference instance of <code>testdb3.coaches</code>
     */
    public static final Coaches COACHES = new Coaches();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoachesRecord> getRecordType() {
        return CoachesRecord.class;
    }

    /**
     * The column <code>testdb3.coaches.coachID</code>.
     */
    public final TableField<CoachesRecord, String> COACHID = createField(DSL.name("coachID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>testdb3.coaches.roleInTeam</code>.
     */
    public final TableField<CoachesRecord, CoachesRoleinteam> ROLEINTEAM = createField(DSL.name("roleInTeam"), org.jooq.impl.SQLDataType.VARCHAR(8).nullable(false).defaultValue(org.jooq.impl.DSL.field("'GENERAL'", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(dataLayer.Tables.enums.CoachesRoleinteam.class), this, "");

    /**
     * The column <code>testdb3.coaches.training</code>.
     */
    public final TableField<CoachesRecord, CoachesTraining> TRAINING = createField(DSL.name("training"), org.jooq.impl.SQLDataType.VARCHAR(7).defaultValue(org.jooq.impl.DSL.field("'GENERAL'", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(dataLayer.Tables.enums.CoachesTraining.class), this, "");

    /**
     * The column <code>testdb3.coaches.salary</code>.
     */
    public final TableField<CoachesRecord, Integer> SALARY = createField(DSL.name("salary"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("0", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>testdb3.coaches.teamOwnerID_fictive</code>.
     */
    public final TableField<CoachesRecord, String> TEAMOWNERID_FICTIVE = createField(DSL.name("teamOwnerID_fictive"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>testdb3.coaches</code> table reference
     */
    public Coaches() {
        this(DSL.name("coaches"), null);
    }

    /**
     * Create an aliased <code>testdb3.coaches</code> table reference
     */
    public Coaches(String alias) {
        this(DSL.name(alias), COACHES);
    }

    /**
     * Create an aliased <code>testdb3.coaches</code> table reference
     */
    public Coaches(Name alias) {
        this(alias, COACHES);
    }

    private Coaches(Name alias, Table<CoachesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Coaches(Name alias, Table<CoachesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Coaches(Table<O> child, ForeignKey<O, CoachesRecord> key) {
        super(child, key, COACHES);
    }

    @Override
    public Schema getSchema() {
        return Testdb3.TESTDB3;
    }

    @Override
    public UniqueKey<CoachesRecord> getPrimaryKey() {
        return Keys.KEY_COACHES_PRIMARY;
    }

    @Override
    public List<UniqueKey<CoachesRecord>> getKeys() {
        return Arrays.<UniqueKey<CoachesRecord>>asList(Keys.KEY_COACHES_PRIMARY);
    }

    @Override
    public List<ForeignKey<CoachesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CoachesRecord, ?>>asList(Keys.FK_COACHES_SUBSCRIBERS, Keys.TEAMOWNER);
    }

    public Subscribers subscribers() {
        return new Subscribers(this, Keys.FK_COACHES_SUBSCRIBERS);
    }

    public TeamownerOwnereligible teamownerOwnereligible() {
        return new TeamownerOwnereligible(this, Keys.TEAMOWNER);
    }

    @Override
    public Coaches as(String alias) {
        return new Coaches(DSL.name(alias), this);
    }

    @Override
    public Coaches as(Name alias) {
        return new Coaches(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Coaches rename(String name) {
        return new Coaches(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Coaches rename(Name name) {
        return new Coaches(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<String, CoachesRoleinteam, CoachesTraining, Integer, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
