/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.Localsoccer;
import dataLayer.Tables.tables.records.SubstituteRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Substitute extends TableImpl<SubstituteRecord> {

    private static final long serialVersionUID = -31458700;

    /**
     * The reference instance of <code>localsoccer.substitute</code>
     */
    public static final Substitute SUBSTITUTE = new Substitute();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SubstituteRecord> getRecordType() {
        return SubstituteRecord.class;
    }

    /**
     * The column <code>localsoccer.substitute.MatchID</code>.
     */
    public final TableField<SubstituteRecord, Integer> MATCHID = createField(DSL.name("MatchID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>localsoccer.substitute.EventID</code>.
     */
    public final TableField<SubstituteRecord, Integer> EVENTID = createField(DSL.name("EventID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>localsoccer.substitute.Time</code>.
     */
    public final TableField<SubstituteRecord, String> TIME = createField(DSL.name("Time"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>localsoccer.substitute.PlayerInID</code>.
     */
    public final TableField<SubstituteRecord, String> PLAYERINID = createField(DSL.name("PlayerInID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>localsoccer.substitute.PlayerOutID</code>.
     */
    public final TableField<SubstituteRecord, String> PLAYEROUTID = createField(DSL.name("PlayerOutID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>localsoccer.substitute</code> table reference
     */
    public Substitute() {
        this(DSL.name("substitute"), null);
    }

    /**
     * Create an aliased <code>localsoccer.substitute</code> table reference
     */
    public Substitute(String alias) {
        this(DSL.name(alias), SUBSTITUTE);
    }

    /**
     * Create an aliased <code>localsoccer.substitute</code> table reference
     */
    public Substitute(Name alias) {
        this(alias, SUBSTITUTE);
    }

    private Substitute(Name alias, Table<SubstituteRecord> aliased) {
        this(alias, aliased, null);
    }

    private Substitute(Name alias, Table<SubstituteRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Substitute(Table<O> child, ForeignKey<O, SubstituteRecord> key) {
        super(child, key, SUBSTITUTE);
    }

    @Override
    public Schema getSchema() {
        return Localsoccer.LOCALSOCCER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SUBSTITUTE_MATCHID);
    }

    @Override
    public List<ForeignKey<SubstituteRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SubstituteRecord, ?>>asList(Keys.FK_SUBSTITUTE_MATCH, Keys.FK_SUBSTITUTE_PLAYERS, Keys.FK_SUBSTITUTE_PLAYERS_2);
    }

    public Match match() {
        return new Match(this, Keys.FK_SUBSTITUTE_MATCH);
    }

    public Players fkSubstitutePlayers() {
        return new Players(this, Keys.FK_SUBSTITUTE_PLAYERS);
    }

    public Players fkSubstitutePlayers_2() {
        return new Players(this, Keys.FK_SUBSTITUTE_PLAYERS_2);
    }

    @Override
    public Substitute as(String alias) {
        return new Substitute(DSL.name(alias), this);
    }

    @Override
    public Substitute as(Name alias) {
        return new Substitute(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Substitute rename(String name) {
        return new Substitute(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Substitute rename(Name name) {
        return new Substitute(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Integer, Integer, String, String, String> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
