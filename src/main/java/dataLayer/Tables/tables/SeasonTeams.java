/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.Localsoccer;
import dataLayer.Tables.tables.records.SeasonTeamsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SeasonTeams extends TableImpl<SeasonTeamsRecord> {

    private static final long serialVersionUID = -255930694;

    /**
     * The reference instance of <code>localsoccer.season_teams</code>
     */
    public static final SeasonTeams SEASON_TEAMS = new SeasonTeams();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<SeasonTeamsRecord> getRecordType() {
        return SeasonTeamsRecord.class;
    }

    /**
     * The column <code>localsoccer.season_teams.LeagueID</code>.
     */
    public final TableField<SeasonTeamsRecord, String> LEAGUEID = createField(DSL.name("LeagueID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>localsoccer.season_teams.SeasonID</code>.
     */
    public final TableField<SeasonTeamsRecord, Integer> SEASONID = createField(DSL.name("SeasonID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>localsoccer.season_teams.TeamID</code>.
     */
    public final TableField<SeasonTeamsRecord, String> TEAMID = createField(DSL.name("TeamID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>localsoccer.season_teams</code> table reference
     */
    public SeasonTeams() {
        this(DSL.name("season_teams"), null);
    }

    /**
     * Create an aliased <code>localsoccer.season_teams</code> table reference
     */
    public SeasonTeams(String alias) {
        this(DSL.name(alias), SEASON_TEAMS);
    }

    /**
     * Create an aliased <code>localsoccer.season_teams</code> table reference
     */
    public SeasonTeams(Name alias) {
        this(alias, SEASON_TEAMS);
    }

    private SeasonTeams(Name alias, Table<SeasonTeamsRecord> aliased) {
        this(alias, aliased, null);
    }

    private SeasonTeams(Name alias, Table<SeasonTeamsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> SeasonTeams(Table<O> child, ForeignKey<O, SeasonTeamsRecord> key) {
        super(child, key, SEASON_TEAMS);
    }

    @Override
    public Schema getSchema() {
        return Localsoccer.LOCALSOCCER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.SEASON_TEAMS_LEAGUEID);
    }

    @Override
    public List<ForeignKey<SeasonTeamsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<SeasonTeamsRecord, ?>>asList(Keys.FK_SEASON_TEAMS_LEAGUE, Keys.FK_SEASON_TEAMS_TEAMS);
    }

    public League league() {
        return new League(this, Keys.FK_SEASON_TEAMS_LEAGUE);
    }

    public Teams teams() {
        return new Teams(this, Keys.FK_SEASON_TEAMS_TEAMS);
    }

    @Override
    public SeasonTeams as(String alias) {
        return new SeasonTeams(DSL.name(alias), this);
    }

    @Override
    public SeasonTeams as(Name alias) {
        return new SeasonTeams(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public SeasonTeams rename(String name) {
        return new SeasonTeams(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public SeasonTeams rename(Name name) {
        return new SeasonTeams(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
