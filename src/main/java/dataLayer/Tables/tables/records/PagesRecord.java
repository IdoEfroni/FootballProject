/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables.records;


import dataLayer.Tables.tables.Pages;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PagesRecord extends UpdatableRecordImpl<PagesRecord> implements Record3<String, String, LocalDate> {

    private static final long serialVersionUID = -496580522;

    /**
     * Setter for <code>localsoccer.pages.usernameID</code>.
     */
    public void setUsernameid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>localsoccer.pages.usernameID</code>.
     */
    public String getUsernameid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>localsoccer.pages.name</code>.
     */
    public void setName(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>localsoccer.pages.name</code>.
     */
    public String getName() {
        return (String) get(1);
    }

    /**
     * Setter for <code>localsoccer.pages.birthday</code>.
     */
    public void setBirthday(LocalDate value) {
        set(2, value);
    }

    /**
     * Getter for <code>localsoccer.pages.birthday</code>.
     */
    public LocalDate getBirthday() {
        return (LocalDate) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, String, LocalDate> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, String, LocalDate> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Pages.PAGES.USERNAMEID;
    }

    @Override
    public Field<String> field2() {
        return Pages.PAGES.NAME;
    }

    @Override
    public Field<LocalDate> field3() {
        return Pages.PAGES.BIRTHDAY;
    }

    @Override
    public String component1() {
        return getUsernameid();
    }

    @Override
    public String component2() {
        return getName();
    }

    @Override
    public LocalDate component3() {
        return getBirthday();
    }

    @Override
    public String value1() {
        return getUsernameid();
    }

    @Override
    public String value2() {
        return getName();
    }

    @Override
    public LocalDate value3() {
        return getBirthday();
    }

    @Override
    public PagesRecord value1(String value) {
        setUsernameid(value);
        return this;
    }

    @Override
    public PagesRecord value2(String value) {
        setName(value);
        return this;
    }

    @Override
    public PagesRecord value3(LocalDate value) {
        setBirthday(value);
        return this;
    }

    @Override
    public PagesRecord values(String value1, String value2, LocalDate value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached PagesRecord
     */
    public PagesRecord() {
        super(Pages.PAGES);
    }

    /**
     * Create a detached, initialised PagesRecord
     */
    public PagesRecord(String usernameid, String name, LocalDate birthday) {
        super(Pages.PAGES);

        set(0, usernameid);
        set(1, name);
        set(2, birthday);
    }
}
