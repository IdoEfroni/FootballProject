/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables.records;


import dataLayer.Tables.tables.Subscribers;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class SubscribersRecord extends UpdatableRecordImpl<SubscribersRecord> implements Record4<String, String, String, String> {

    private static final long serialVersionUID = -1923957649;

    /**
     * Setter for <code>testdb3.subscribers.SubscriberID</code>.
     */
    public void setSubscriberid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>testdb3.subscribers.SubscriberID</code>.
     */
    public String getSubscriberid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>testdb3.subscribers.password</code>.
     */
    public void setPassword(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>testdb3.subscribers.password</code>.
     */
    public String getPassword() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testdb3.subscribers.name</code>.
     */
    public void setName(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>testdb3.subscribers.name</code>.
     */
    public String getName() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testdb3.subscribers.type</code>.
     */
    public void setType(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>testdb3.subscribers.type</code>.
     */
    public String getType() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<String, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<String, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Subscribers.SUBSCRIBERS.SUBSCRIBERID;
    }

    @Override
    public Field<String> field2() {
        return Subscribers.SUBSCRIBERS.PASSWORD;
    }

    @Override
    public Field<String> field3() {
        return Subscribers.SUBSCRIBERS.NAME;
    }

    @Override
    public Field<String> field4() {
        return Subscribers.SUBSCRIBERS.TYPE;
    }

    @Override
    public String component1() {
        return getSubscriberid();
    }

    @Override
    public String component2() {
        return getPassword();
    }

    @Override
    public String component3() {
        return getName();
    }

    @Override
    public String component4() {
        return getType();
    }

    @Override
    public String value1() {
        return getSubscriberid();
    }

    @Override
    public String value2() {
        return getPassword();
    }

    @Override
    public String value3() {
        return getName();
    }

    @Override
    public String value4() {
        return getType();
    }

    @Override
    public SubscribersRecord value1(String value) {
        setSubscriberid(value);
        return this;
    }

    @Override
    public SubscribersRecord value2(String value) {
        setPassword(value);
        return this;
    }

    @Override
    public SubscribersRecord value3(String value) {
        setName(value);
        return this;
    }

    @Override
    public SubscribersRecord value4(String value) {
        setType(value);
        return this;
    }

    @Override
    public SubscribersRecord values(String value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached SubscribersRecord
     */
    public SubscribersRecord() {
        super(Subscribers.SUBSCRIBERS);
    }

    /**
     * Create a detached, initialised SubscribersRecord
     */
    public SubscribersRecord(String subscriberid, String password, String name, String type) {
        super(Subscribers.SUBSCRIBERS);

        set(0, subscriberid);
        set(1, password);
        set(2, name);
        set(3, type);
    }
}
