/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables.records;


import dataLayer.Tables.tables.Stadium;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StadiumRecord extends UpdatableRecordImpl<StadiumRecord> implements Record3<String, Integer, Integer> {

    private static final long serialVersionUID = -249937911;

    /**
     * Setter for <code>localsoccer.stadium.StadiumID</code>.
     */
    public void setStadiumid(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>localsoccer.stadium.StadiumID</code>.
     */
    public String getStadiumid() {
        return (String) get(0);
    }

    /**
     * Setter for <code>localsoccer.stadium.numOfSeats</code>.
     */
    public void setNumofseats(Integer value) {
        set(1, value);
    }

    /**
     * Getter for <code>localsoccer.stadium.numOfSeats</code>.
     */
    public Integer getNumofseats() {
        return (Integer) get(1);
    }

    /**
     * Setter for <code>localsoccer.stadium.ticketCost</code>.
     */
    public void setTicketcost(Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>localsoccer.stadium.ticketCost</code>.
     */
    public Integer getTicketcost() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Integer, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, Integer, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return Stadium.STADIUM.STADIUMID;
    }

    @Override
    public Field<Integer> field2() {
        return Stadium.STADIUM.NUMOFSEATS;
    }

    @Override
    public Field<Integer> field3() {
        return Stadium.STADIUM.TICKETCOST;
    }

    @Override
    public String component1() {
        return getStadiumid();
    }

    @Override
    public Integer component2() {
        return getNumofseats();
    }

    @Override
    public Integer component3() {
        return getTicketcost();
    }

    @Override
    public String value1() {
        return getStadiumid();
    }

    @Override
    public Integer value2() {
        return getNumofseats();
    }

    @Override
    public Integer value3() {
        return getTicketcost();
    }

    @Override
    public StadiumRecord value1(String value) {
        setStadiumid(value);
        return this;
    }

    @Override
    public StadiumRecord value2(Integer value) {
        setNumofseats(value);
        return this;
    }

    @Override
    public StadiumRecord value3(Integer value) {
        setTicketcost(value);
        return this;
    }

    @Override
    public StadiumRecord values(String value1, Integer value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StadiumRecord
     */
    public StadiumRecord() {
        super(Stadium.STADIUM);
    }

    /**
     * Create a detached, initialised StadiumRecord
     */
    public StadiumRecord(String stadiumid, Integer numofseats, Integer ticketcost) {
        super(Stadium.STADIUM);

        set(0, stadiumid);
        set(1, numofseats);
        set(2, ticketcost);
    }
}
