/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables.records;


import dataLayer.Tables.tables.Logs;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class LogsRecord extends UpdatableRecordImpl<LogsRecord> implements Record4<Integer, String, String, String> {

    private static final long serialVersionUID = -239494348;

    /**
     * Setter for <code>testdb3.logs.index</code>.
     */
    public void setIndex(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>testdb3.logs.index</code>.
     */
    public Integer getIndex() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>testdb3.logs.time</code>.
     */
    public void setTime(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>testdb3.logs.time</code>.
     */
    public String getTime() {
        return (String) get(1);
    }

    /**
     * Setter for <code>testdb3.logs.catrgory</code>.
     */
    public void setCatrgory(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>testdb3.logs.catrgory</code>.
     */
    public String getCatrgory() {
        return (String) get(2);
    }

    /**
     * Setter for <code>testdb3.logs.info</code>.
     */
    public void setInfo(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>testdb3.logs.info</code>.
     */
    public String getInfo() {
        return (String) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, String, String, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, String, String, String> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Logs.LOGS.INDEX;
    }

    @Override
    public Field<String> field2() {
        return Logs.LOGS.TIME;
    }

    @Override
    public Field<String> field3() {
        return Logs.LOGS.CATRGORY;
    }

    @Override
    public Field<String> field4() {
        return Logs.LOGS.INFO;
    }

    @Override
    public Integer component1() {
        return getIndex();
    }

    @Override
    public String component2() {
        return getTime();
    }

    @Override
    public String component3() {
        return getCatrgory();
    }

    @Override
    public String component4() {
        return getInfo();
    }

    @Override
    public Integer value1() {
        return getIndex();
    }

    @Override
    public String value2() {
        return getTime();
    }

    @Override
    public String value3() {
        return getCatrgory();
    }

    @Override
    public String value4() {
        return getInfo();
    }

    @Override
    public LogsRecord value1(Integer value) {
        setIndex(value);
        return this;
    }

    @Override
    public LogsRecord value2(String value) {
        setTime(value);
        return this;
    }

    @Override
    public LogsRecord value3(String value) {
        setCatrgory(value);
        return this;
    }

    @Override
    public LogsRecord value4(String value) {
        setInfo(value);
        return this;
    }

    @Override
    public LogsRecord values(Integer value1, String value2, String value3, String value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached LogsRecord
     */
    public LogsRecord() {
        super(Logs.LOGS);
    }

    /**
     * Create a detached, initialised LogsRecord
     */
    public LogsRecord(Integer index, String time, String catrgory, String info) {
        super(Logs.LOGS);

        set(0, index);
        set(1, time);
        set(2, catrgory);
        set(3, info);
    }
}
