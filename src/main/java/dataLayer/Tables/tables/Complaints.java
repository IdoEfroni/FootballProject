/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Demodb;
import dataLayer.Tables.Keys;
import dataLayer.Tables.tables.records.ComplaintsRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row6;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Complaints extends TableImpl<ComplaintsRecord> {

    private static final long serialVersionUID = 179976014;

    /**
     * The reference instance of <code>demodb.complaints</code>
     */
    public static final Complaints COMPLAINTS = new Complaints();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ComplaintsRecord> getRecordType() {
        return ComplaintsRecord.class;
    }

    /**
     * The column <code>demodb.complaints.ComplaintID</code>.
     */
    public final TableField<ComplaintsRecord, Integer> COMPLAINTID = createField(DSL.name("ComplaintID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>demodb.complaints.WriterID</code>.
     */
    public final TableField<ComplaintsRecord, String> WRITERID = createField(DSL.name("WriterID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>demodb.complaints.Content</code>.
     */
    public final TableField<ComplaintsRecord, String> CONTENT = createField(DSL.name("Content"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>demodb.complaints.handlerID</code>.
     */
    public final TableField<ComplaintsRecord, String> HANDLERID = createField(DSL.name("handlerID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>demodb.complaints.Comment</code>.
     */
    public final TableField<ComplaintsRecord, String> COMMENT = createField(DSL.name("Comment"), org.jooq.impl.SQLDataType.VARCHAR(500).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>demodb.complaints.isAnswered</code>.
     */
    public final TableField<ComplaintsRecord, Boolean> ISANSWERED = createField(DSL.name("isAnswered"), org.jooq.impl.SQLDataType.BIT.nullable(false).defaultValue(org.jooq.impl.DSL.field("b'0'", org.jooq.impl.SQLDataType.BIT)), this, "");

    /**
     * Create a <code>demodb.complaints</code> table reference
     */
    public Complaints() {
        this(DSL.name("complaints"), null);
    }

    /**
     * Create an aliased <code>demodb.complaints</code> table reference
     */
    public Complaints(String alias) {
        this(DSL.name(alias), COMPLAINTS);
    }

    /**
     * Create an aliased <code>demodb.complaints</code> table reference
     */
    public Complaints(Name alias) {
        this(alias, COMPLAINTS);
    }

    private Complaints(Name alias, Table<ComplaintsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Complaints(Name alias, Table<ComplaintsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Complaints(Table<O> child, ForeignKey<O, ComplaintsRecord> key) {
        super(child, key, COMPLAINTS);
    }

    @Override
    public Schema getSchema() {
        return Demodb.DEMODB;
    }

    @Override
    public UniqueKey<ComplaintsRecord> getPrimaryKey() {
        return Keys.KEY_COMPLAINTS_PRIMARY;
    }

    @Override
    public List<UniqueKey<ComplaintsRecord>> getKeys() {
        return Arrays.<UniqueKey<ComplaintsRecord>>asList(Keys.KEY_COMPLAINTS_PRIMARY);
    }

    @Override
    public List<ForeignKey<ComplaintsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<ComplaintsRecord, ?>>asList(Keys.FK__SUBSCRIBERS, Keys.FK__SUBSCRIBERS_2);
    }

    public Subscribers fk_Subscribers() {
        return new Subscribers(this, Keys.FK__SUBSCRIBERS);
    }

    public Subscribers fk_Subscribers_2() {
        return new Subscribers(this, Keys.FK__SUBSCRIBERS_2);
    }

    @Override
    public Complaints as(String alias) {
        return new Complaints(DSL.name(alias), this);
    }

    @Override
    public Complaints as(Name alias) {
        return new Complaints(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Complaints rename(String name) {
        return new Complaints(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Complaints rename(Name name) {
        return new Complaints(name, null);
    }

    // -------------------------------------------------------------------------
    // Row6 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row6<Integer, String, String, String, String, Boolean> fieldsRow() {
        return (Row6) super.fieldsRow();
    }
}
