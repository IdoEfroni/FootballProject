/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Demodb;
import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.tables.records.MatchRefereeRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class MatchReferee extends TableImpl<MatchRefereeRecord> {

    private static final long serialVersionUID = -749344043;

    /**
     * The reference instance of <code>demodb.match_referee</code>
     */
    public static final MatchReferee MATCH_REFEREE = new MatchReferee();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchRefereeRecord> getRecordType() {
        return MatchRefereeRecord.class;
    }

    /**
     * The column <code>demodb.match_referee.MatchID</code>.
     */
    public final TableField<MatchRefereeRecord, Integer> MATCHID = createField(DSL.name("MatchID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>demodb.match_referee.RefereeID</code>.
     */
    public final TableField<MatchRefereeRecord, String> REFEREEID = createField(DSL.name("RefereeID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>demodb.match_referee</code> table reference
     */
    public MatchReferee() {
        this(DSL.name("match_referee"), null);
    }

    /**
     * Create an aliased <code>demodb.match_referee</code> table reference
     */
    public MatchReferee(String alias) {
        this(DSL.name(alias), MATCH_REFEREE);
    }

    /**
     * Create an aliased <code>demodb.match_referee</code> table reference
     */
    public MatchReferee(Name alias) {
        this(alias, MATCH_REFEREE);
    }

    private MatchReferee(Name alias, Table<MatchRefereeRecord> aliased) {
        this(alias, aliased, null);
    }

    private MatchReferee(Name alias, Table<MatchRefereeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> MatchReferee(Table<O> child, ForeignKey<O, MatchRefereeRecord> key) {
        super(child, key, MATCH_REFEREE);
    }

    @Override
    public Schema getSchema() {
        return Demodb.DEMODB;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.MATCH_REFEREE_MATCHID);
    }

    @Override
    public List<ForeignKey<MatchRefereeRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MatchRefereeRecord, ?>>asList(Keys.FK_MATCH_REFEREE_MATCH, Keys.FK_MATCH_REFEREE_REFEREES);
    }

    public Match match() {
        return new Match(this, Keys.FK_MATCH_REFEREE_MATCH);
    }

    public Referees referees() {
        return new Referees(this, Keys.FK_MATCH_REFEREE_REFEREES);
    }

    @Override
    public MatchReferee as(String alias) {
        return new MatchReferee(DSL.name(alias), this);
    }

    @Override
    public MatchReferee as(Name alias) {
        return new MatchReferee(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchReferee rename(String name) {
        return new MatchReferee(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public MatchReferee rename(Name name) {
        return new MatchReferee(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
