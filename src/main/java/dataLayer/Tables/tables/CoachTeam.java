/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.Testdb3;
import dataLayer.Tables.tables.records.CoachTeamRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class CoachTeam extends TableImpl<CoachTeamRecord> {

    private static final long serialVersionUID = 526040649;

    /**
     * The reference instance of <code>testdb3.coach_team</code>
     */
    public static final CoachTeam COACH_TEAM = new CoachTeam();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CoachTeamRecord> getRecordType() {
        return CoachTeamRecord.class;
    }

    /**
     * The column <code>testdb3.coach_team.coachID</code>.
     */
    public final TableField<CoachTeamRecord, String> COACHID = createField(DSL.name("coachID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>testdb3.coach_team.teamID</code>.
     */
    public final TableField<CoachTeamRecord, String> TEAMID = createField(DSL.name("teamID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * Create a <code>testdb3.coach_team</code> table reference
     */
    public CoachTeam() {
        this(DSL.name("coach_team"), null);
    }

    /**
     * Create an aliased <code>testdb3.coach_team</code> table reference
     */
    public CoachTeam(String alias) {
        this(DSL.name(alias), COACH_TEAM);
    }

    /**
     * Create an aliased <code>testdb3.coach_team</code> table reference
     */
    public CoachTeam(Name alias) {
        this(alias, COACH_TEAM);
    }

    private CoachTeam(Name alias, Table<CoachTeamRecord> aliased) {
        this(alias, aliased, null);
    }

    private CoachTeam(Name alias, Table<CoachTeamRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> CoachTeam(Table<O> child, ForeignKey<O, CoachTeamRecord> key) {
        super(child, key, COACH_TEAM);
    }

    @Override
    public Schema getSchema() {
        return Testdb3.TESTDB3;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.COACH_TEAM_COACHID);
    }

    @Override
    public List<ForeignKey<CoachTeamRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<CoachTeamRecord, ?>>asList(Keys.FK_COACH_TEAM_COACHES, Keys.FK_COACH_TEAM_TEAMS);
    }

    public Coaches coaches() {
        return new Coaches(this, Keys.FK_COACH_TEAM_COACHES);
    }

    public Teams teams() {
        return new Teams(this, Keys.FK_COACH_TEAM_TEAMS);
    }

    @Override
    public CoachTeam as(String alias) {
        return new CoachTeam(DSL.name(alias), this);
    }

    @Override
    public CoachTeam as(Name alias) {
        return new CoachTeam(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public CoachTeam rename(String name) {
        return new CoachTeam(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public CoachTeam rename(Name name) {
        return new CoachTeam(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
