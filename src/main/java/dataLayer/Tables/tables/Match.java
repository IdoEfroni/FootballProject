/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Demodb;
import dataLayer.Tables.Keys;
import dataLayer.Tables.tables.records.MatchRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row11;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.jooq.types.UByte;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Match extends TableImpl<MatchRecord> {

    private static final long serialVersionUID = 14729645;

    /**
     * The reference instance of <code>demodb.match</code>
     */
    public static final Match MATCH = new Match();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<MatchRecord> getRecordType() {
        return MatchRecord.class;
    }

    /**
     * The column <code>demodb.match.MatchID</code>.
     */
    public final TableField<MatchRecord, Integer> MATCHID = createField(DSL.name("MatchID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>demodb.match.LeagueID</code>.
     */
    public final TableField<MatchRecord, String> LEAGUEID = createField(DSL.name("LeagueID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>demodb.match.SeasonID</code>.
     */
    public final TableField<MatchRecord, Integer> SEASONID = createField(DSL.name("SeasonID"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>demodb.match.TeamHomeID</code>.
     */
    public final TableField<MatchRecord, String> TEAMHOMEID = createField(DSL.name("TeamHomeID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>demodb.match.TeamAwayID</code>.
     */
    public final TableField<MatchRecord, String> TEAMAWAYID = createField(DSL.name("TeamAwayID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>demodb.match.StadiumID</code>.
     */
    public final TableField<MatchRecord, String> STADIUMID = createField(DSL.name("StadiumID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>demodb.match.Score</code>.
     */
    public final TableField<MatchRecord, String> SCORE = createField(DSL.name("Score"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>demodb.match.isFinished</code>.
     */
    public final TableField<MatchRecord, UByte> ISFINISHED = createField(DSL.name("isFinished"), org.jooq.impl.SQLDataType.TINYINTUNSIGNED.defaultValue(org.jooq.impl.DSL.field("000", org.jooq.impl.SQLDataType.TINYINTUNSIGNED)), this, "");

    /**
     * The column <code>demodb.match.Date</code>.
     */
    public final TableField<MatchRecord, LocalDate> DATE = createField(DSL.name("Date"), org.jooq.impl.SQLDataType.LOCALDATE.defaultValue(org.jooq.impl.DSL.field("curdate()", org.jooq.impl.SQLDataType.LOCALDATE)), this, "");

    /**
     * The column <code>demodb.match.numberOfFans</code>.
     */
    public final TableField<MatchRecord, Integer> NUMBEROFFANS = createField(DSL.name("numberOfFans"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * The column <code>demodb.match.mainRefereeID</code>.
     */
    public final TableField<MatchRecord, String> MAINREFEREEID = createField(DSL.name("mainRefereeID"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>demodb.match</code> table reference
     */
    public Match() {
        this(DSL.name("match"), null);
    }

    /**
     * Create an aliased <code>demodb.match</code> table reference
     */
    public Match(String alias) {
        this(DSL.name(alias), MATCH);
    }

    /**
     * Create an aliased <code>demodb.match</code> table reference
     */
    public Match(Name alias) {
        this(alias, MATCH);
    }

    private Match(Name alias, Table<MatchRecord> aliased) {
        this(alias, aliased, null);
    }

    private Match(Name alias, Table<MatchRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Match(Table<O> child, ForeignKey<O, MatchRecord> key) {
        super(child, key, MATCH);
    }

    @Override
    public Schema getSchema() {
        return Demodb.DEMODB;
    }

    @Override
    public UniqueKey<MatchRecord> getPrimaryKey() {
        return Keys.KEY_MATCH_PRIMARY;
    }

    @Override
    public List<UniqueKey<MatchRecord>> getKeys() {
        return Arrays.<UniqueKey<MatchRecord>>asList(Keys.KEY_MATCH_PRIMARY);
    }

    @Override
    public List<ForeignKey<MatchRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<MatchRecord, ?>>asList(Keys.FK_MATCH_LEAGUE, Keys.FK_MATCH_TEAMS, Keys.FK_MATCH_TEAMS_2, Keys.FK3, Keys.FK_MATCH_REFEREES);
    }

    public League league() {
        return new League(this, Keys.FK_MATCH_LEAGUE);
    }

    public Teams fkMatchTeams() {
        return new Teams(this, Keys.FK_MATCH_TEAMS);
    }

    public Teams fkMatchTeams_2() {
        return new Teams(this, Keys.FK_MATCH_TEAMS_2);
    }

    public Stadium stadium() {
        return new Stadium(this, Keys.FK3);
    }

    public Referees referees() {
        return new Referees(this, Keys.FK_MATCH_REFEREES);
    }

    @Override
    public Match as(String alias) {
        return new Match(DSL.name(alias), this);
    }

    @Override
    public Match as(Name alias) {
        return new Match(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Match rename(String name) {
        return new Match(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Match rename(Name name) {
        return new Match(name, null);
    }

    // -------------------------------------------------------------------------
    // Row11 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row11<Integer, String, Integer, String, String, String, String, UByte, LocalDate, Integer, String> fieldsRow() {
        return (Row11) super.fieldsRow();
    }
}
