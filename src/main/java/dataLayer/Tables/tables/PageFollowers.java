/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Demodb;
import dataLayer.Tables.Keys;
import dataLayer.Tables.tables.records.PageFollowersRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PageFollowers extends TableImpl<PageFollowersRecord> {

    private static final long serialVersionUID = 1928500569;

    /**
     * The reference instance of <code>demodb.page_followers</code>
     */
    public static final PageFollowers PAGE_FOLLOWERS = new PageFollowers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PageFollowersRecord> getRecordType() {
        return PageFollowersRecord.class;
    }

    /**
     * The column <code>demodb.page_followers.pageID</code>.
     */
    public final TableField<PageFollowersRecord, Integer> PAGEID = createField(DSL.name("pageID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>demodb.page_followers.followerID</code>.
     */
    public final TableField<PageFollowersRecord, String> FOLLOWERID = createField(DSL.name("followerID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>demodb.page_followers</code> table reference
     */
    public PageFollowers() {
        this(DSL.name("page_followers"), null);
    }

    /**
     * Create an aliased <code>demodb.page_followers</code> table reference
     */
    public PageFollowers(String alias) {
        this(DSL.name(alias), PAGE_FOLLOWERS);
    }

    /**
     * Create an aliased <code>demodb.page_followers</code> table reference
     */
    public PageFollowers(Name alias) {
        this(alias, PAGE_FOLLOWERS);
    }

    private PageFollowers(Name alias, Table<PageFollowersRecord> aliased) {
        this(alias, aliased, null);
    }

    private PageFollowers(Name alias, Table<PageFollowersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PageFollowers(Table<O> child, ForeignKey<O, PageFollowersRecord> key) {
        super(child, key, PAGE_FOLLOWERS);
    }

    @Override
    public Schema getSchema() {
        return Demodb.DEMODB;
    }

    @Override
    public List<ForeignKey<PageFollowersRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PageFollowersRecord, ?>>asList(Keys.FK__PAGES3, Keys.FK__SUBSCRIBERS6);
    }

    public Pages pages() {
        return new Pages(this, Keys.FK__PAGES3);
    }

    public Subscribers subscribers() {
        return new Subscribers(this, Keys.FK__SUBSCRIBERS6);
    }

    @Override
    public PageFollowers as(String alias) {
        return new PageFollowers(DSL.name(alias), this);
    }

    @Override
    public PageFollowers as(Name alias) {
        return new PageFollowers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PageFollowers rename(String name) {
        return new PageFollowers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PageFollowers rename(Name name) {
        return new PageFollowers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Integer, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
