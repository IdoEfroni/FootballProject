/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Keys;
import dataLayer.Tables.Testdb3;
import dataLayer.Tables.tables.records.PagesRecord;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Pages extends TableImpl<PagesRecord> {

    private static final long serialVersionUID = -1091796733;

    /**
     * The reference instance of <code>testdb3.pages</code>
     */
    public static final Pages PAGES = new Pages();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PagesRecord> getRecordType() {
        return PagesRecord.class;
    }

    /**
     * The column <code>testdb3.pages.pageID</code>.
     */
    public final TableField<PagesRecord, Integer> PAGEID = createField(DSL.name("pageID"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>testdb3.pages.name</code>.
     */
    public final TableField<PagesRecord, String> NAME = createField(DSL.name("name"), org.jooq.impl.SQLDataType.VARCHAR(50).defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * The column <code>testdb3.pages.birthday</code>.
     */
    public final TableField<PagesRecord, LocalDate> BIRTHDAY = createField(DSL.name("birthday"), org.jooq.impl.SQLDataType.LOCALDATE.defaultValue(org.jooq.impl.DSL.field("curdate()", org.jooq.impl.SQLDataType.LOCALDATE)), this, "");

    /**
     * Create a <code>testdb3.pages</code> table reference
     */
    public Pages() {
        this(DSL.name("pages"), null);
    }

    /**
     * Create an aliased <code>testdb3.pages</code> table reference
     */
    public Pages(String alias) {
        this(DSL.name(alias), PAGES);
    }

    /**
     * Create an aliased <code>testdb3.pages</code> table reference
     */
    public Pages(Name alias) {
        this(alias, PAGES);
    }

    private Pages(Name alias, Table<PagesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Pages(Name alias, Table<PagesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Pages(Table<O> child, ForeignKey<O, PagesRecord> key) {
        super(child, key, PAGES);
    }

    @Override
    public Schema getSchema() {
        return Testdb3.TESTDB3;
    }

    @Override
    public Identity<PagesRecord, Integer> getIdentity() {
        return Keys.IDENTITY_PAGES;
    }

    @Override
    public UniqueKey<PagesRecord> getPrimaryKey() {
        return Keys.KEY_PAGES_PRIMARY;
    }

    @Override
    public List<UniqueKey<PagesRecord>> getKeys() {
        return Arrays.<UniqueKey<PagesRecord>>asList(Keys.KEY_PAGES_PRIMARY);
    }

    @Override
    public Pages as(String alias) {
        return new Pages(DSL.name(alias), this);
    }

    @Override
    public Pages as(Name alias) {
        return new Pages(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Pages rename(String name) {
        return new Pages(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Pages rename(Name name) {
        return new Pages(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, String, LocalDate> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
