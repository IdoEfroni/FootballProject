/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Demodb;
import dataLayer.Tables.Keys;
import dataLayer.Tables.enums.RefereesRoleref;
import dataLayer.Tables.tables.records.RefereesRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Referees extends TableImpl<RefereesRecord> {

    private static final long serialVersionUID = 1747862422;

    /**
     * The reference instance of <code>demodb.referees</code>
     */
    public static final Referees REFEREES = new Referees();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RefereesRecord> getRecordType() {
        return RefereesRecord.class;
    }

    /**
     * The column <code>demodb.referees.refereeID</code>.
     */
    public final TableField<RefereesRecord, String> REFEREEID = createField(DSL.name("refereeID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>demodb.referees.roleRef</code>.
     */
    public final TableField<RefereesRecord, RefereesRoleref> ROLEREF = createField(DSL.name("roleRef"), org.jooq.impl.SQLDataType.VARCHAR(9).defaultValue(org.jooq.impl.DSL.field("'MAIN'", org.jooq.impl.SQLDataType.VARCHAR)).asEnumDataType(dataLayer.Tables.enums.RefereesRoleref.class), this, "");

    /**
     * Create a <code>demodb.referees</code> table reference
     */
    public Referees() {
        this(DSL.name("referees"), null);
    }

    /**
     * Create an aliased <code>demodb.referees</code> table reference
     */
    public Referees(String alias) {
        this(DSL.name(alias), REFEREES);
    }

    /**
     * Create an aliased <code>demodb.referees</code> table reference
     */
    public Referees(Name alias) {
        this(alias, REFEREES);
    }

    private Referees(Name alias, Table<RefereesRecord> aliased) {
        this(alias, aliased, null);
    }

    private Referees(Name alias, Table<RefereesRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> Referees(Table<O> child, ForeignKey<O, RefereesRecord> key) {
        super(child, key, REFEREES);
    }

    @Override
    public Schema getSchema() {
        return Demodb.DEMODB;
    }

    @Override
    public UniqueKey<RefereesRecord> getPrimaryKey() {
        return Keys.KEY_REFEREES_PRIMARY;
    }

    @Override
    public List<UniqueKey<RefereesRecord>> getKeys() {
        return Arrays.<UniqueKey<RefereesRecord>>asList(Keys.KEY_REFEREES_PRIMARY);
    }

    @Override
    public List<ForeignKey<RefereesRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<RefereesRecord, ?>>asList(Keys.FK_REFEREES_SUBSCRIBERS);
    }

    public Subscribers subscribers() {
        return new Subscribers(this, Keys.FK_REFEREES_SUBSCRIBERS);
    }

    @Override
    public Referees as(String alias) {
        return new Referees(DSL.name(alias), this);
    }

    @Override
    public Referees as(Name alias) {
        return new Referees(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Referees rename(String name) {
        return new Referees(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Referees rename(Name name) {
        return new Referees(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, RefereesRoleref> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
