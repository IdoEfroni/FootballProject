/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.Localsoccer;
import dataLayer.Tables.tables.records.PagePostRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * all posts of username
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PagePost extends TableImpl<PagePostRecord> {

    private static final long serialVersionUID = -1744106929;

    /**
     * The reference instance of <code>localsoccer.page_post</code>
     */
    public static final PagePost PAGE_POST = new PagePost();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PagePostRecord> getRecordType() {
        return PagePostRecord.class;
    }

    /**
     * The column <code>localsoccer.page_post.usernameID</code>.
     */
    public final TableField<PagePostRecord, String> USERNAMEID = createField(DSL.name("usernameID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>localsoccer.page_post.post</code>.
     */
    public final TableField<PagePostRecord, String> POST = createField(DSL.name("post"), org.jooq.impl.SQLDataType.VARCHAR(500).nullable(false).defaultValue(org.jooq.impl.DSL.field("''", org.jooq.impl.SQLDataType.VARCHAR)), this, "");

    /**
     * Create a <code>localsoccer.page_post</code> table reference
     */
    public PagePost() {
        this(DSL.name("page_post"), null);
    }

    /**
     * Create an aliased <code>localsoccer.page_post</code> table reference
     */
    public PagePost(String alias) {
        this(DSL.name(alias), PAGE_POST);
    }

    /**
     * Create an aliased <code>localsoccer.page_post</code> table reference
     */
    public PagePost(Name alias) {
        this(alias, PAGE_POST);
    }

    private PagePost(Name alias, Table<PagePostRecord> aliased) {
        this(alias, aliased, null);
    }

    private PagePost(Name alias, Table<PagePostRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("all posts of username"), TableOptions.table());
    }

    public <O extends Record> PagePost(Table<O> child, ForeignKey<O, PagePostRecord> key) {
        super(child, key, PAGE_POST);
    }

    @Override
    public Schema getSchema() {
        return Localsoccer.LOCALSOCCER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PAGE_POST_USERNAMEID);
    }

    @Override
    public List<ForeignKey<PagePostRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PagePostRecord, ?>>asList(Keys.FK_PAGE_POST_PAGES);
    }

    public Pages pages() {
        return new Pages(this, Keys.FK_PAGE_POST_PAGES);
    }

    @Override
    public PagePost as(String alias) {
        return new PagePost(DSL.name(alias), this);
    }

    @Override
    public PagePost as(Name alias) {
        return new PagePost(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PagePost rename(String name) {
        return new PagePost(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PagePost rename(Name name) {
        return new PagePost(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
