/*
 * This file is generated by jOOQ.
 */
package dataLayer.Tables.tables;


import dataLayer.Tables.Indexes;
import dataLayer.Tables.Keys;
import dataLayer.Tables.Localsoccer;
import dataLayer.Tables.tables.records.PreviousGamesInStadiumRecord;

import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class PreviousGamesInStadium extends TableImpl<PreviousGamesInStadiumRecord> {

    private static final long serialVersionUID = 1909940582;

    /**
     * The reference instance of <code>localsoccer.previous_games_in_stadium</code>
     */
    public static final PreviousGamesInStadium PREVIOUS_GAMES_IN_STADIUM = new PreviousGamesInStadium();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PreviousGamesInStadiumRecord> getRecordType() {
        return PreviousGamesInStadiumRecord.class;
    }

    /**
     * The column <code>localsoccer.previous_games_in_stadium.StadiumID</code>.
     */
    public final TableField<PreviousGamesInStadiumRecord, String> STADIUMID = createField(DSL.name("StadiumID"), org.jooq.impl.SQLDataType.VARCHAR(50).nullable(false), this, "");

    /**
     * The column <code>localsoccer.previous_games_in_stadium.MatchID</code>.
     */
    public final TableField<PreviousGamesInStadiumRecord, Integer> MATCHID = createField(DSL.name("MatchID"), org.jooq.impl.SQLDataType.INTEGER.defaultValue(org.jooq.impl.DSL.field("NULL", org.jooq.impl.SQLDataType.INTEGER)), this, "");

    /**
     * Create a <code>localsoccer.previous_games_in_stadium</code> table reference
     */
    public PreviousGamesInStadium() {
        this(DSL.name("previous_games_in_stadium"), null);
    }

    /**
     * Create an aliased <code>localsoccer.previous_games_in_stadium</code> table reference
     */
    public PreviousGamesInStadium(String alias) {
        this(DSL.name(alias), PREVIOUS_GAMES_IN_STADIUM);
    }

    /**
     * Create an aliased <code>localsoccer.previous_games_in_stadium</code> table reference
     */
    public PreviousGamesInStadium(Name alias) {
        this(alias, PREVIOUS_GAMES_IN_STADIUM);
    }

    private PreviousGamesInStadium(Name alias, Table<PreviousGamesInStadiumRecord> aliased) {
        this(alias, aliased, null);
    }

    private PreviousGamesInStadium(Name alias, Table<PreviousGamesInStadiumRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> PreviousGamesInStadium(Table<O> child, ForeignKey<O, PreviousGamesInStadiumRecord> key) {
        super(child, key, PREVIOUS_GAMES_IN_STADIUM);
    }

    @Override
    public Schema getSchema() {
        return Localsoccer.LOCALSOCCER;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.PREVIOUS_GAMES_IN_STADIUM_STADIUMID);
    }

    @Override
    public List<ForeignKey<PreviousGamesInStadiumRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<PreviousGamesInStadiumRecord, ?>>asList(Keys.FK_PREVIOUS_GAMES_IN_STADIUM_STADIUM, Keys.FK_PREVIOUS_GAMES_IN_STADIUM_MATCH);
    }

    public Stadium stadium() {
        return new Stadium(this, Keys.FK_PREVIOUS_GAMES_IN_STADIUM_STADIUM);
    }

    public Match match() {
        return new Match(this, Keys.FK_PREVIOUS_GAMES_IN_STADIUM_MATCH);
    }

    @Override
    public PreviousGamesInStadium as(String alias) {
        return new PreviousGamesInStadium(DSL.name(alias), this);
    }

    @Override
    public PreviousGamesInStadium as(Name alias) {
        return new PreviousGamesInStadium(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public PreviousGamesInStadium rename(String name) {
        return new PreviousGamesInStadium(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public PreviousGamesInStadium rename(Name name) {
        return new PreviousGamesInStadium(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<String, Integer> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
